   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 18, 4
  12              		.thumb
  13              		.file	"stm32f10x_bkp.c"
  23              	.Ltext0:
  24              		.file 1 "stm32f10x_bkp.c"
 15531              		.align	1
 15532              		.global	BKP_DeInit
 15533              		.thumb
 15534              		.thumb_func
 15536              	BKP_DeInit:
 15537              	.LFB27:
   0:stm32f10x_bkp.c **** /**
   1:stm32f10x_bkp.c ****   ******************************************************************************
   2:stm32f10x_bkp.c ****   * @file    stm32f10x_bkp.c
   3:stm32f10x_bkp.c ****   * @author  MCD Application Team
   4:stm32f10x_bkp.c ****   * @version V3.1.2
   5:stm32f10x_bkp.c ****   * @date    09/28/2009
   6:stm32f10x_bkp.c ****   * @brief   This file provides all the BKP firmware functions.
   7:stm32f10x_bkp.c ****   ******************************************************************************
   8:stm32f10x_bkp.c ****   * @copy
   9:stm32f10x_bkp.c ****   *
  10:stm32f10x_bkp.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  11:stm32f10x_bkp.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  12:stm32f10x_bkp.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
  13:stm32f10x_bkp.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  14:stm32f10x_bkp.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  15:stm32f10x_bkp.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  16:stm32f10x_bkp.c ****   *
  17:stm32f10x_bkp.c ****   * <h2><center>&copy; COPYRIGHT 2009 STMicroelectronics</center></h2>
  18:stm32f10x_bkp.c ****   */ 
  19:stm32f10x_bkp.c **** 
  20:stm32f10x_bkp.c **** /* Includes ------------------------------------------------------------------*/
  21:stm32f10x_bkp.c **** #include "stm32f10x_bkp.h"
  22:stm32f10x_bkp.c **** #include "stm32f10x_rcc.h"
  23:stm32f10x_bkp.c **** 
  24:stm32f10x_bkp.c **** /** @addtogroup STM32F10x_StdPeriph_Driver
  25:stm32f10x_bkp.c ****   * @{
  26:stm32f10x_bkp.c ****   */
  27:stm32f10x_bkp.c **** 
  28:stm32f10x_bkp.c **** /** @defgroup BKP 
  29:stm32f10x_bkp.c ****   * @brief BKP driver modules
  30:stm32f10x_bkp.c ****   * @{
  31:stm32f10x_bkp.c ****   */
  32:stm32f10x_bkp.c **** 
  33:stm32f10x_bkp.c **** /** @defgroup BKP_Private_TypesDefinitions
  34:stm32f10x_bkp.c ****   * @{
  35:stm32f10x_bkp.c ****   */
  36:stm32f10x_bkp.c **** 
  37:stm32f10x_bkp.c **** /**
  38:stm32f10x_bkp.c ****   * @}
  39:stm32f10x_bkp.c ****   */
  40:stm32f10x_bkp.c **** 
  41:stm32f10x_bkp.c **** /** @defgroup BKP_Private_Defines
  42:stm32f10x_bkp.c ****   * @{
  43:stm32f10x_bkp.c ****   */
  44:stm32f10x_bkp.c **** 
  45:stm32f10x_bkp.c **** /* ------------ BKP registers bit address in the alias region --------------- */
  46:stm32f10x_bkp.c **** #define BKP_OFFSET        (BKP_BASE - PERIPH_BASE)
  47:stm32f10x_bkp.c **** 
  48:stm32f10x_bkp.c **** /* --- CR Register ----*/
  49:stm32f10x_bkp.c **** 
  50:stm32f10x_bkp.c **** /* Alias word address of TPAL bit */
  51:stm32f10x_bkp.c **** #define CR_OFFSET         (BKP_OFFSET + 0x30)
  52:stm32f10x_bkp.c **** #define TPAL_BitNumber    0x01
  53:stm32f10x_bkp.c **** #define CR_TPAL_BB        (PERIPH_BB_BASE + (CR_OFFSET * 32) + (TPAL_BitNumber * 4))
  54:stm32f10x_bkp.c **** 
  55:stm32f10x_bkp.c **** /* Alias word address of TPE bit */
  56:stm32f10x_bkp.c **** #define TPE_BitNumber     0x00
  57:stm32f10x_bkp.c **** #define CR_TPE_BB         (PERIPH_BB_BASE + (CR_OFFSET * 32) + (TPE_BitNumber * 4))
  58:stm32f10x_bkp.c **** 
  59:stm32f10x_bkp.c **** /* --- CSR Register ---*/
  60:stm32f10x_bkp.c **** 
  61:stm32f10x_bkp.c **** /* Alias word address of TPIE bit */
  62:stm32f10x_bkp.c **** #define CSR_OFFSET        (BKP_OFFSET + 0x34)
  63:stm32f10x_bkp.c **** #define TPIE_BitNumber    0x02
  64:stm32f10x_bkp.c **** #define CSR_TPIE_BB       (PERIPH_BB_BASE + (CSR_OFFSET * 32) + (TPIE_BitNumber * 4))
  65:stm32f10x_bkp.c **** 
  66:stm32f10x_bkp.c **** /* Alias word address of TIF bit */
  67:stm32f10x_bkp.c **** #define TIF_BitNumber     0x09
  68:stm32f10x_bkp.c **** #define CSR_TIF_BB        (PERIPH_BB_BASE + (CSR_OFFSET * 32) + (TIF_BitNumber * 4))
  69:stm32f10x_bkp.c **** 
  70:stm32f10x_bkp.c **** /* Alias word address of TEF bit */
  71:stm32f10x_bkp.c **** #define TEF_BitNumber     0x08
  72:stm32f10x_bkp.c **** #define CSR_TEF_BB        (PERIPH_BB_BASE + (CSR_OFFSET * 32) + (TEF_BitNumber * 4))
  73:stm32f10x_bkp.c **** 
  74:stm32f10x_bkp.c **** /* ---------------------- BKP registers bit mask ------------------------ */
  75:stm32f10x_bkp.c **** 
  76:stm32f10x_bkp.c **** /* RTCCR register bit mask */
  77:stm32f10x_bkp.c **** #define RTCCR_CAL_Mask    ((uint16_t)0xFF80)
  78:stm32f10x_bkp.c **** #define RTCCR_Mask        ((uint16_t)0xFC7F)
  79:stm32f10x_bkp.c **** 
  80:stm32f10x_bkp.c **** /* CSR register bit mask */
  81:stm32f10x_bkp.c **** #define CSR_CTE_Set       ((uint16_t)0x0001)
  82:stm32f10x_bkp.c **** #define CSR_CTI_Set       ((uint16_t)0x0002)
  83:stm32f10x_bkp.c **** 
  84:stm32f10x_bkp.c **** /**
  85:stm32f10x_bkp.c ****   * @}
  86:stm32f10x_bkp.c ****   */ 
  87:stm32f10x_bkp.c **** 
  88:stm32f10x_bkp.c **** 
  89:stm32f10x_bkp.c **** /** @defgroup BKP_Private_Macros
  90:stm32f10x_bkp.c ****   * @{
  91:stm32f10x_bkp.c ****   */
  92:stm32f10x_bkp.c **** 
  93:stm32f10x_bkp.c **** /**
  94:stm32f10x_bkp.c ****   * @}
  95:stm32f10x_bkp.c ****   */
  96:stm32f10x_bkp.c **** 
  97:stm32f10x_bkp.c **** /** @defgroup BKP_Private_Variables
  98:stm32f10x_bkp.c ****   * @{
  99:stm32f10x_bkp.c ****   */
 100:stm32f10x_bkp.c **** 
 101:stm32f10x_bkp.c **** /**
 102:stm32f10x_bkp.c ****   * @}
 103:stm32f10x_bkp.c ****   */
 104:stm32f10x_bkp.c **** 
 105:stm32f10x_bkp.c **** /** @defgroup BKP_Private_FunctionPrototypes
 106:stm32f10x_bkp.c ****   * @{
 107:stm32f10x_bkp.c ****   */
 108:stm32f10x_bkp.c **** 
 109:stm32f10x_bkp.c **** /**
 110:stm32f10x_bkp.c ****   * @}
 111:stm32f10x_bkp.c ****   */
 112:stm32f10x_bkp.c **** 
 113:stm32f10x_bkp.c **** /** @defgroup BKP_Private_Functions
 114:stm32f10x_bkp.c ****   * @{
 115:stm32f10x_bkp.c ****   */
 116:stm32f10x_bkp.c **** 
 117:stm32f10x_bkp.c **** /**
 118:stm32f10x_bkp.c ****   * @brief  Deinitializes the BKP peripheral registers to their default reset values.
 119:stm32f10x_bkp.c ****   * @param  None
 120:stm32f10x_bkp.c ****   * @retval None
 121:stm32f10x_bkp.c ****   */
 122:stm32f10x_bkp.c **** void BKP_DeInit(void)
 123:stm32f10x_bkp.c **** {
 15538              		.loc 1 124 0
 15539              		@ args = 0, pretend = 0, frame = 0
 15540              		@ frame_needed = 0, uses_anonymous_args = 0
 124:stm32f10x_bkp.c ****   RCC_BackupResetCmd(ENABLE);
 15541              		.loc 1 125 0
 15542 0000 0120     		movs	r0, #1
 124:stm32f10x_bkp.c ****   RCC_BackupResetCmd(ENABLE);
 15543              		.loc 1 124 0
 15544 0002 08B5     		push	{r3, lr}
 15545              	.LCFI0:
 15546              		.loc 1 125 0
 15547 0004 FFF7FEFF 		bl	RCC_BackupResetCmd
 125:stm32f10x_bkp.c ****   RCC_BackupResetCmd(DISABLE);
 15548              		.loc 1 126 0
 15549 0008 0020     		movs	r0, #0
 15550 000a FFF7FEFF 		bl	RCC_BackupResetCmd
 126:stm32f10x_bkp.c **** }
 15551              		.loc 1 127 0
 15552 000e 08BD     		pop	{r3, pc}
 15553              	.LFE27:
 15555              		.section	.text.BKP_TamperPinLevelConfig,"ax",%progbits
 15556              		.align	1
 15557              		.global	BKP_TamperPinLevelConfig
 15558              		.thumb
 15559              		.thumb_func
 15561              	BKP_TamperPinLevelConfig:
 15562              	.LFB28:
 127:stm32f10x_bkp.c **** 
 128:stm32f10x_bkp.c **** /**
 129:stm32f10x_bkp.c ****   * @brief  Configures the Tamper Pin active level.
 130:stm32f10x_bkp.c ****   * @param  BKP_TamperPinLevel: specifies the Tamper Pin active level.
 131:stm32f10x_bkp.c ****   *   This parameter can be one of the following values:
 132:stm32f10x_bkp.c ****   *     @arg BKP_TamperPinLevel_High: Tamper pin active on high level
 133:stm32f10x_bkp.c ****   *     @arg BKP_TamperPinLevel_Low: Tamper pin active on low level
 134:stm32f10x_bkp.c ****   * @retval None
 135:stm32f10x_bkp.c ****   */
 136:stm32f10x_bkp.c **** void BKP_TamperPinLevelConfig(uint16_t BKP_TamperPinLevel)
 137:stm32f10x_bkp.c **** {
 15563              		.loc 1 138 0
 15564              		@ args = 0, pretend = 0, frame = 0
 15565              		@ frame_needed = 0, uses_anonymous_args = 0
 15566              		@ link register save eliminated.
 15567              	.LVL0:
 138:stm32f10x_bkp.c ****   /* Check the parameters */
 139:stm32f10x_bkp.c ****   assert_param(IS_BKP_TAMPER_PIN_LEVEL(BKP_TamperPinLevel));
 140:stm32f10x_bkp.c ****   *(__IO uint32_t *) CR_TPAL_BB = BKP_TamperPinLevel;
 15568              		.loc 1 141 0
 15569 0000 014B     		ldr	r3, .L3
 15570 0002 1860     		str	r0, [r3, #0]
 141:stm32f10x_bkp.c **** }
 15571              		.loc 1 142 0
 15572 0004 7047     		bx	lr
 15573              	.L4:
 15574 0006 00BF     		.align	2
 15575              	.L3:
 15576 0008 04860D42 		.word	1108182532
 15577              	.LFE28:
 15579              		.section	.text.BKP_TamperPinCmd,"ax",%progbits
 15580              		.align	1
 15581              		.global	BKP_TamperPinCmd
 15582              		.thumb
 15583              		.thumb_func
 15585              	BKP_TamperPinCmd:
 15586              	.LFB29:
 142:stm32f10x_bkp.c **** 
 143:stm32f10x_bkp.c **** /**
 144:stm32f10x_bkp.c ****   * @brief  Enables or disables the Tamper Pin activation.
 145:stm32f10x_bkp.c ****   * @param  NewState: new state of the Tamper Pin activation.
 146:stm32f10x_bkp.c ****   *   This parameter can be: ENABLE or DISABLE.
 147:stm32f10x_bkp.c ****   * @retval None
 148:stm32f10x_bkp.c ****   */
 149:stm32f10x_bkp.c **** void BKP_TamperPinCmd(FunctionalState NewState)
 150:stm32f10x_bkp.c **** {
 15587              		.loc 1 151 0
 15588              		@ args = 0, pretend = 0, frame = 0
 15589              		@ frame_needed = 0, uses_anonymous_args = 0
 15590              		@ link register save eliminated.
 15591              	.LVL1:
 151:stm32f10x_bkp.c ****   /* Check the parameters */
 152:stm32f10x_bkp.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 153:stm32f10x_bkp.c ****   *(__IO uint32_t *) CR_TPE_BB = (uint32_t)NewState;
 15592              		.loc 1 154 0
 15593 0000 014B     		ldr	r3, .L6
 15594 0002 1860     		str	r0, [r3, #0]
 154:stm32f10x_bkp.c **** }
 15595              		.loc 1 155 0
 15596 0004 7047     		bx	lr
 15597              	.L7:
 15598 0006 00BF     		.align	2
 15599              	.L6:
 15600 0008 00860D42 		.word	1108182528
 15601              	.LFE29:
 15603              		.section	.text.BKP_ITConfig,"ax",%progbits
 15604              		.align	1
 15605              		.global	BKP_ITConfig
 15606              		.thumb
 15607              		.thumb_func
 15609              	BKP_ITConfig:
 15610              	.LFB30:
 155:stm32f10x_bkp.c **** 
 156:stm32f10x_bkp.c **** /**
 157:stm32f10x_bkp.c ****   * @brief  Enables or disables the Tamper Pin Interrupt.
 158:stm32f10x_bkp.c ****   * @param  NewState: new state of the Tamper Pin Interrupt.
 159:stm32f10x_bkp.c ****   *   This parameter can be: ENABLE or DISABLE.
 160:stm32f10x_bkp.c ****   * @retval None
 161:stm32f10x_bkp.c ****   */
 162:stm32f10x_bkp.c **** void BKP_ITConfig(FunctionalState NewState)
 163:stm32f10x_bkp.c **** {
 15611              		.loc 1 164 0
 15612              		@ args = 0, pretend = 0, frame = 0
 15613              		@ frame_needed = 0, uses_anonymous_args = 0
 15614              		@ link register save eliminated.
 15615              	.LVL2:
 164:stm32f10x_bkp.c ****   /* Check the parameters */
 165:stm32f10x_bkp.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 166:stm32f10x_bkp.c ****   *(__IO uint32_t *) CSR_TPIE_BB = (uint32_t)NewState;
 15616              		.loc 1 167 0
 15617 0000 014B     		ldr	r3, .L9
 15618 0002 1860     		str	r0, [r3, #0]
 167:stm32f10x_bkp.c **** }
 15619              		.loc 1 168 0
 15620 0004 7047     		bx	lr
 15621              	.L10:
 15622 0006 00BF     		.align	2
 15623              	.L9:
 15624 0008 88860D42 		.word	1108182664
 15625              	.LFE30:
 15627              		.section	.text.BKP_RTCOutputConfig,"ax",%progbits
 15628              		.align	1
 15629              		.global	BKP_RTCOutputConfig
 15630              		.thumb
 15631              		.thumb_func
 15633              	BKP_RTCOutputConfig:
 15634              	.LFB31:
 168:stm32f10x_bkp.c **** 
 169:stm32f10x_bkp.c **** /**
 170:stm32f10x_bkp.c ****   * @brief  Select the RTC output source to output on the Tamper pin.
 171:stm32f10x_bkp.c ****   * @param  BKP_RTCOutputSource: specifies the RTC output source.
 172:stm32f10x_bkp.c ****   *   This parameter can be one of the following values:
 173:stm32f10x_bkp.c ****   *     @arg BKP_RTCOutputSource_None: no RTC output on the Tamper pin.
 174:stm32f10x_bkp.c ****   *     @arg BKP_RTCOutputSource_CalibClock: output the RTC clock with frequency
 175:stm32f10x_bkp.c ****   *                                          divided by 64 on the Tamper pin.
 176:stm32f10x_bkp.c ****   *     @arg BKP_RTCOutputSource_Alarm: output the RTC Alarm pulse signal on
 177:stm32f10x_bkp.c ****   *                                     the Tamper pin.
 178:stm32f10x_bkp.c ****   *     @arg BKP_RTCOutputSource_Second: output the RTC Second pulse signal on
 179:stm32f10x_bkp.c ****   *                                      the Tamper pin.  
 180:stm32f10x_bkp.c ****   * @retval None
 181:stm32f10x_bkp.c ****   */
 182:stm32f10x_bkp.c **** void BKP_RTCOutputConfig(uint16_t BKP_RTCOutputSource)
 183:stm32f10x_bkp.c **** {
 15635              		.loc 1 184 0
 15636              		@ args = 0, pretend = 0, frame = 0
 15637              		@ frame_needed = 0, uses_anonymous_args = 0
 15638              		@ link register save eliminated.
 15639              	.LVL3:
 184:stm32f10x_bkp.c ****   uint16_t tmpreg = 0;
 185:stm32f10x_bkp.c ****   /* Check the parameters */
 186:stm32f10x_bkp.c ****   assert_param(IS_BKP_RTC_OUTPUT_SOURCE(BKP_RTCOutputSource));
 187:stm32f10x_bkp.c ****   tmpreg = BKP->RTCCR;
 15640              		.loc 1 188 0
 15641 0000 054A     		ldr	r2, .L12
 15642 0002 B2F82CC0 		ldrh	ip, [r2, #44]
 15643              	.LVL4:
 188:stm32f10x_bkp.c ****   /* Clear CCO, ASOE and ASOS bits */
 189:stm32f10x_bkp.c ****   tmpreg &= RTCCR_Mask;
 15644              		.loc 1 190 0
 15645 0006 2CF46071 		bic	r1, ip, #896
 15646 000a 0B04     		lsls	r3, r1, #16
 15647 000c 190C     		lsrs	r1, r3, #16
 15648              	.LVL5:
 190:stm32f10x_bkp.c ****   
 191:stm32f10x_bkp.c ****   /* Set CCO, ASOE and ASOS bits according to BKP_RTCOutputSource value */
 192:stm32f10x_bkp.c ****   tmpreg |= BKP_RTCOutputSource;
 15649              		.loc 1 193 0
 15650 000e 40EA0103 		orr	r3, r0, r1
 15651              	.LVL6:
 193:stm32f10x_bkp.c ****   /* Store the new value */
 194:stm32f10x_bkp.c ****   BKP->RTCCR = tmpreg;
 15652              		.loc 1 195 0
 15653 0012 9385     		strh	r3, [r2, #44]	@ movhi
 195:stm32f10x_bkp.c **** }
 15654              		.loc 1 196 0
 15655 0014 7047     		bx	lr
 15656              	.L13:
 15657 0016 00BF     		.align	2
 15658              	.L12:
 15659 0018 006C0040 		.word	1073769472
 15660              	.LFE31:
 15662              		.section	.text.BKP_SetRTCCalibrationValue,"ax",%progbits
 15663              		.align	1
 15664              		.global	BKP_SetRTCCalibrationValue
 15665              		.thumb
 15666              		.thumb_func
 15668              	BKP_SetRTCCalibrationValue:
 15669              	.LFB32:
 196:stm32f10x_bkp.c **** 
 197:stm32f10x_bkp.c **** /**
 198:stm32f10x_bkp.c ****   * @brief  Sets RTC Clock Calibration value.
 199:stm32f10x_bkp.c ****   * @param  CalibrationValue: specifies the RTC Clock Calibration value.
 200:stm32f10x_bkp.c ****   *   This parameter must be a number between 0 and 0x7F.
 201:stm32f10x_bkp.c ****   * @retval None
 202:stm32f10x_bkp.c ****   */
 203:stm32f10x_bkp.c **** void BKP_SetRTCCalibrationValue(uint8_t CalibrationValue)
 204:stm32f10x_bkp.c **** {
 15670              		.loc 1 205 0
 15671              		@ args = 0, pretend = 0, frame = 0
 15672              		@ frame_needed = 0, uses_anonymous_args = 0
 15673              		@ link register save eliminated.
 15674              	.LVL7:
 205:stm32f10x_bkp.c ****   uint16_t tmpreg = 0;
 206:stm32f10x_bkp.c ****   /* Check the parameters */
 207:stm32f10x_bkp.c ****   assert_param(IS_BKP_CALIBRATION_VALUE(CalibrationValue));
 208:stm32f10x_bkp.c ****   tmpreg = BKP->RTCCR;
 15675              		.loc 1 209 0
 15676 0000 054A     		ldr	r2, .L15
 15677 0002 B2F82CC0 		ldrh	ip, [r2, #44]
 15678              	.LVL8:
 209:stm32f10x_bkp.c ****   /* Clear CAL[6:0] bits */
 210:stm32f10x_bkp.c ****   tmpreg &= RTCCR_CAL_Mask;
 15679              		.loc 1 211 0
 15680 0006 2CF07F01 		bic	r1, ip, #127
 15681 000a 0B04     		lsls	r3, r1, #16
 15682 000c 190C     		lsrs	r1, r3, #16
 15683              	.LVL9:
 211:stm32f10x_bkp.c ****   /* Set CAL[6:0] bits according to CalibrationValue value */
 212:stm32f10x_bkp.c ****   tmpreg |= CalibrationValue;
 15684              		.loc 1 213 0
 15685 000e 40EA0103 		orr	r3, r0, r1
 15686              	.LVL10:
 213:stm32f10x_bkp.c ****   /* Store the new value */
 214:stm32f10x_bkp.c ****   BKP->RTCCR = tmpreg;
 15687              		.loc 1 215 0
 15688 0012 9385     		strh	r3, [r2, #44]	@ movhi
 215:stm32f10x_bkp.c **** }
 15689              		.loc 1 216 0
 15690 0014 7047     		bx	lr
 15691              	.L16:
 15692 0016 00BF     		.align	2
 15693              	.L15:
 15694 0018 006C0040 		.word	1073769472
 15695              	.LFE32:
 15697              		.section	.text.BKP_WriteBackupRegister,"ax",%progbits
 15698              		.align	1
 15699              		.global	BKP_WriteBackupRegister
 15700              		.thumb
 15701              		.thumb_func
 15703              	BKP_WriteBackupRegister:
 15704              	.LFB33:
 216:stm32f10x_bkp.c **** 
 217:stm32f10x_bkp.c **** /**
 218:stm32f10x_bkp.c ****   * @brief  Writes user data to the specified Data Backup Register.
 219:stm32f10x_bkp.c ****   * @param  BKP_DR: specifies the Data Backup Register.
 220:stm32f10x_bkp.c ****   *   This parameter can be BKP_DRx where x:[1, 42]
 221:stm32f10x_bkp.c ****   * @param  Data: data to write
 222:stm32f10x_bkp.c ****   * @retval None
 223:stm32f10x_bkp.c ****   */
 224:stm32f10x_bkp.c **** void BKP_WriteBackupRegister(uint16_t BKP_DR, uint16_t Data)
 225:stm32f10x_bkp.c **** {
 15705              		.loc 1 226 0
 15706              		@ args = 0, pretend = 0, frame = 8
 15707              		@ frame_needed = 0, uses_anonymous_args = 0
 15708              		@ link register save eliminated.
 15709              	.LVL11:
 226:stm32f10x_bkp.c ****   __IO uint32_t tmp = 0;
 227:stm32f10x_bkp.c **** 
 228:stm32f10x_bkp.c ****   /* Check the parameters */
 229:stm32f10x_bkp.c ****   assert_param(IS_BKP_DR(BKP_DR));
 230:stm32f10x_bkp.c **** 
 231:stm32f10x_bkp.c ****   tmp = (uint32_t)BKP_BASE; 
 15710              		.loc 1 232 0
 15711 0000 DFF818C0 		ldr	ip, .L18
 226:stm32f10x_bkp.c ****   __IO uint32_t tmp = 0;
 15712              		.loc 1 226 0
 15713 0004 82B0     		sub	sp, sp, #8
 15714              	.LCFI1:
 227:stm32f10x_bkp.c ****   __IO uint32_t tmp = 0;
 15715              		.loc 1 227 0
 15716 0006 0023     		movs	r3, #0
 15717 0008 0193     		str	r3, [sp, #4]
 15718              	.LVL12:
 15719              		.loc 1 232 0
 15720 000a CDF804C0 		str	ip, [sp, #4]
 15721              	.LVL13:
 232:stm32f10x_bkp.c ****   tmp += BKP_DR;
 15722              		.loc 1 233 0
 15723 000e 019A     		ldr	r2, [sp, #4]
 15724 0010 8018     		adds	r0, r0, r2
 15725              	.LVL14:
 15726 0012 0190     		str	r0, [sp, #4]
 15727              	.LVL15:
 233:stm32f10x_bkp.c **** 
 234:stm32f10x_bkp.c ****   *(__IO uint32_t *) tmp = Data;
 15728              		.loc 1 235 0
 15729 0014 019B     		ldr	r3, [sp, #4]
 15730 0016 1960     		str	r1, [r3, #0]
 235:stm32f10x_bkp.c **** }
 15731              		.loc 1 236 0
 15732 0018 02B0     		add	sp, sp, #8
 15733 001a 7047     		bx	lr
 15734              	.L19:
 15735              		.align	2
 15736              	.L18:
 15737 001c 006C0040 		.word	1073769472
 15738              	.LFE33:
 15740              		.section	.text.BKP_ReadBackupRegister,"ax",%progbits
 15741              		.align	1
 15742              		.global	BKP_ReadBackupRegister
 15743              		.thumb
 15744              		.thumb_func
 15746              	BKP_ReadBackupRegister:
 15747              	.LFB34:
 236:stm32f10x_bkp.c **** 
 237:stm32f10x_bkp.c **** /**
 238:stm32f10x_bkp.c ****   * @brief  Reads data from the specified Data Backup Register.
 239:stm32f10x_bkp.c ****   * @param  BKP_DR: specifies the Data Backup Register.
 240:stm32f10x_bkp.c ****   *   This parameter can be BKP_DRx where x:[1, 42]
 241:stm32f10x_bkp.c ****   * @retval The content of the specified Data Backup Register
 242:stm32f10x_bkp.c ****   */
 243:stm32f10x_bkp.c **** uint16_t BKP_ReadBackupRegister(uint16_t BKP_DR)
 244:stm32f10x_bkp.c **** {
 15748              		.loc 1 245 0
 15749              		@ args = 0, pretend = 0, frame = 8
 15750              		@ frame_needed = 0, uses_anonymous_args = 0
 15751              		@ link register save eliminated.
 15752              	.LVL16:
 245:stm32f10x_bkp.c ****   __IO uint32_t tmp = 0;
 246:stm32f10x_bkp.c **** 
 247:stm32f10x_bkp.c ****   /* Check the parameters */
 248:stm32f10x_bkp.c ****   assert_param(IS_BKP_DR(BKP_DR));
 249:stm32f10x_bkp.c **** 
 250:stm32f10x_bkp.c ****   tmp = (uint32_t)BKP_BASE; 
 15753              		.loc 1 251 0
 15754 0000 DFF81CC0 		ldr	ip, .L21
 245:stm32f10x_bkp.c ****   __IO uint32_t tmp = 0;
 15755              		.loc 1 245 0
 15756 0004 82B0     		sub	sp, sp, #8
 15757              	.LCFI2:
 246:stm32f10x_bkp.c ****   __IO uint32_t tmp = 0;
 15758              		.loc 1 246 0
 15759 0006 0023     		movs	r3, #0
 15760 0008 0193     		str	r3, [sp, #4]
 15761              	.LVL17:
 15762              		.loc 1 251 0
 15763 000a CDF804C0 		str	ip, [sp, #4]
 15764              	.LVL18:
 251:stm32f10x_bkp.c ****   tmp += BKP_DR;
 15765              		.loc 1 252 0
 15766 000e 019A     		ldr	r2, [sp, #4]
 15767 0010 8118     		adds	r1, r0, r2
 15768              	.LVL19:
 15769 0012 0191     		str	r1, [sp, #4]
 15770              	.LVL20:
 252:stm32f10x_bkp.c **** 
 253:stm32f10x_bkp.c ****   return (*(__IO uint16_t *) tmp);
 15771              		.loc 1 254 0
 15772 0014 019B     		ldr	r3, [sp, #4]
 15773 0016 1888     		ldrh	r0, [r3, #0]
 15774              	.LVL21:
 15775 0018 80B2     		uxth	r0, r0
 254:stm32f10x_bkp.c **** }
 15776              		.loc 1 255 0
 15777 001a 02B0     		add	sp, sp, #8
 15778 001c 7047     		bx	lr
 15779              	.L22:
 15780 001e 00BF     		.align	2
 15781              	.L21:
 15782 0020 006C0040 		.word	1073769472
 15783              	.LFE34:
 15785              		.section	.text.BKP_GetFlagStatus,"ax",%progbits
 15786              		.align	1
 15787              		.global	BKP_GetFlagStatus
 15788              		.thumb
 15789              		.thumb_func
 15791              	BKP_GetFlagStatus:
 15792              	.LFB35:
 255:stm32f10x_bkp.c **** 
 256:stm32f10x_bkp.c **** /**
 257:stm32f10x_bkp.c ****   * @brief  Checks whether the Tamper Pin Event flag is set or not.
 258:stm32f10x_bkp.c ****   * @param  None
 259:stm32f10x_bkp.c ****   * @retval The new state of the Tamper Pin Event flag (SET or RESET).
 260:stm32f10x_bkp.c ****   */
 261:stm32f10x_bkp.c **** FlagStatus BKP_GetFlagStatus(void)
 262:stm32f10x_bkp.c **** {
 15793              		.loc 1 263 0
 15794              		@ args = 0, pretend = 0, frame = 0
 15795              		@ frame_needed = 0, uses_anonymous_args = 0
 15796              		@ link register save eliminated.
 263:stm32f10x_bkp.c ****   return (FlagStatus)(*(__IO uint32_t *) CSR_TEF_BB);
 15797              		.loc 1 264 0
 15798 0000 014B     		ldr	r3, .L24
 15799 0002 1868     		ldr	r0, [r3, #0]
 15800 0004 C0B2     		uxtb	r0, r0
 264:stm32f10x_bkp.c **** }
 15801              		.loc 1 265 0
 15802 0006 7047     		bx	lr
 15803              	.L25:
 15804              		.align	2
 15805              	.L24:
 15806 0008 A0860D42 		.word	1108182688
 15807              	.LFE35:
 15809              		.section	.text.BKP_ClearFlag,"ax",%progbits
 15810              		.align	1
 15811              		.global	BKP_ClearFlag
 15812              		.thumb
 15813              		.thumb_func
 15815              	BKP_ClearFlag:
 15816              	.LFB36:
 265:stm32f10x_bkp.c **** 
 266:stm32f10x_bkp.c **** /**
 267:stm32f10x_bkp.c ****   * @brief  Clears Tamper Pin Event pending flag.
 268:stm32f10x_bkp.c ****   * @param  None
 269:stm32f10x_bkp.c ****   * @retval None
 270:stm32f10x_bkp.c ****   */
 271:stm32f10x_bkp.c **** void BKP_ClearFlag(void)
 272:stm32f10x_bkp.c **** {
 15817              		.loc 1 273 0
 15818              		@ args = 0, pretend = 0, frame = 0
 15819              		@ frame_needed = 0, uses_anonymous_args = 0
 15820              		@ link register save eliminated.
 273:stm32f10x_bkp.c ****   /* Set CTE bit to clear Tamper Pin Event flag */
 274:stm32f10x_bkp.c ****   BKP->CSR |= CSR_CTE_Set;
 15821              		.loc 1 275 0
 15822 0000 034B     		ldr	r3, .L27
 15823 0002 998E     		ldrh	r1, [r3, #52]
 15824 0004 88B2     		uxth	r0, r1
 15825 0006 40F00102 		orr	r2, r0, #1
 15826 000a 9A86     		strh	r2, [r3, #52]	@ movhi
 275:stm32f10x_bkp.c **** }
 15827              		.loc 1 276 0
 15828 000c 7047     		bx	lr
 15829              	.L28:
 15830 000e 00BF     		.align	2
 15831              	.L27:
 15832 0010 006C0040 		.word	1073769472
 15833              	.LFE36:
 15835              		.section	.text.BKP_GetITStatus,"ax",%progbits
 15836              		.align	1
 15837              		.global	BKP_GetITStatus
 15838              		.thumb
 15839              		.thumb_func
 15841              	BKP_GetITStatus:
 15842              	.LFB37:
 276:stm32f10x_bkp.c **** 
 277:stm32f10x_bkp.c **** /**
 278:stm32f10x_bkp.c ****   * @brief  Checks whether the Tamper Pin Interrupt has occurred or not.
 279:stm32f10x_bkp.c ****   * @param  None
 280:stm32f10x_bkp.c ****   * @retval The new state of the Tamper Pin Interrupt (SET or RESET).
 281:stm32f10x_bkp.c ****   */
 282:stm32f10x_bkp.c **** ITStatus BKP_GetITStatus(void)
 283:stm32f10x_bkp.c **** {
 15843              		.loc 1 284 0
 15844              		@ args = 0, pretend = 0, frame = 0
 15845              		@ frame_needed = 0, uses_anonymous_args = 0
 15846              		@ link register save eliminated.
 284:stm32f10x_bkp.c ****   return (ITStatus)(*(__IO uint32_t *) CSR_TIF_BB);
 15847              		.loc 1 285 0
 15848 0000 014B     		ldr	r3, .L30
 15849 0002 1868     		ldr	r0, [r3, #0]
 15850 0004 C0B2     		uxtb	r0, r0
 285:stm32f10x_bkp.c **** }
 15851              		.loc 1 286 0
 15852 0006 7047     		bx	lr
 15853              	.L31:
 15854              		.align	2
 15855              	.L30:
 15856 0008 A4860D42 		.word	1108182692
 15857              	.LFE37:
 15859              		.section	.text.BKP_ClearITPendingBit,"ax",%progbits
 15860              		.align	1
 15861              		.global	BKP_ClearITPendingBit
 15862              		.thumb
 15863              		.thumb_func
 15865              	BKP_ClearITPendingBit:
 15866              	.LFB38:
 286:stm32f10x_bkp.c **** 
 287:stm32f10x_bkp.c **** /**
 288:stm32f10x_bkp.c ****   * @brief  Clears Tamper Pin Interrupt pending bit.
 289:stm32f10x_bkp.c ****   * @param  None
 290:stm32f10x_bkp.c ****   * @retval None
 291:stm32f10x_bkp.c ****   */
 292:stm32f10x_bkp.c **** void BKP_ClearITPendingBit(void)
 293:stm32f10x_bkp.c **** {
 15867              		.loc 1 294 0
 15868              		@ args = 0, pretend = 0, frame = 0
 15869              		@ frame_needed = 0, uses_anonymous_args = 0
 15870              		@ link register save eliminated.
 294:stm32f10x_bkp.c ****   /* Set CTI bit to clear Tamper Pin Interrupt pending bit */
 295:stm32f10x_bkp.c ****   BKP->CSR |= CSR_CTI_Set;
 15871              		.loc 1 296 0
 15872 0000 034B     		ldr	r3, .L33
 15873 0002 998E     		ldrh	r1, [r3, #52]
 15874 0004 88B2     		uxth	r0, r1
 15875 0006 40F00202 		orr	r2, r0, #2
 15876 000a 9A86     		strh	r2, [r3, #52]	@ movhi
 296:stm32f10x_bkp.c **** }
 15877              		.loc 1 297 0
 15878 000c 7047     		bx	lr
 15879              	.L34:
 15880 000e 00BF     		.align	2
 15881              	.L33:
 15882 0010 006C0040 		.word	1073769472
 15883              	.LFE38:
 16013              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f10x_bkp.c
C:\Users\mm\AppData\Local\Temp\ccBV9hGa.s:15531  .text.BKP_DeInit:00000000 $t
C:\Users\mm\AppData\Local\Temp\ccBV9hGa.s:15536  .text.BKP_DeInit:00000000 BKP_DeInit
C:\Users\mm\AppData\Local\Temp\ccBV9hGa.s:15556  .text.BKP_TamperPinLevelConfig:00000000 $t
C:\Users\mm\AppData\Local\Temp\ccBV9hGa.s:15561  .text.BKP_TamperPinLevelConfig:00000000 BKP_TamperPinLevelConfig
C:\Users\mm\AppData\Local\Temp\ccBV9hGa.s:15576  .text.BKP_TamperPinLevelConfig:00000008 $d
C:\Users\mm\AppData\Local\Temp\ccBV9hGa.s:15580  .text.BKP_TamperPinCmd:00000000 $t
C:\Users\mm\AppData\Local\Temp\ccBV9hGa.s:15585  .text.BKP_TamperPinCmd:00000000 BKP_TamperPinCmd
C:\Users\mm\AppData\Local\Temp\ccBV9hGa.s:15600  .text.BKP_TamperPinCmd:00000008 $d
C:\Users\mm\AppData\Local\Temp\ccBV9hGa.s:15604  .text.BKP_ITConfig:00000000 $t
C:\Users\mm\AppData\Local\Temp\ccBV9hGa.s:15609  .text.BKP_ITConfig:00000000 BKP_ITConfig
C:\Users\mm\AppData\Local\Temp\ccBV9hGa.s:15624  .text.BKP_ITConfig:00000008 $d
C:\Users\mm\AppData\Local\Temp\ccBV9hGa.s:15628  .text.BKP_RTCOutputConfig:00000000 $t
C:\Users\mm\AppData\Local\Temp\ccBV9hGa.s:15633  .text.BKP_RTCOutputConfig:00000000 BKP_RTCOutputConfig
C:\Users\mm\AppData\Local\Temp\ccBV9hGa.s:15659  .text.BKP_RTCOutputConfig:00000018 $d
C:\Users\mm\AppData\Local\Temp\ccBV9hGa.s:15663  .text.BKP_SetRTCCalibrationValue:00000000 $t
C:\Users\mm\AppData\Local\Temp\ccBV9hGa.s:15668  .text.BKP_SetRTCCalibrationValue:00000000 BKP_SetRTCCalibrationValue
C:\Users\mm\AppData\Local\Temp\ccBV9hGa.s:15694  .text.BKP_SetRTCCalibrationValue:00000018 $d
C:\Users\mm\AppData\Local\Temp\ccBV9hGa.s:15698  .text.BKP_WriteBackupRegister:00000000 $t
C:\Users\mm\AppData\Local\Temp\ccBV9hGa.s:15703  .text.BKP_WriteBackupRegister:00000000 BKP_WriteBackupRegister
C:\Users\mm\AppData\Local\Temp\ccBV9hGa.s:15737  .text.BKP_WriteBackupRegister:0000001c $d
C:\Users\mm\AppData\Local\Temp\ccBV9hGa.s:15741  .text.BKP_ReadBackupRegister:00000000 $t
C:\Users\mm\AppData\Local\Temp\ccBV9hGa.s:15746  .text.BKP_ReadBackupRegister:00000000 BKP_ReadBackupRegister
C:\Users\mm\AppData\Local\Temp\ccBV9hGa.s:15782  .text.BKP_ReadBackupRegister:00000020 $d
C:\Users\mm\AppData\Local\Temp\ccBV9hGa.s:15786  .text.BKP_GetFlagStatus:00000000 $t
C:\Users\mm\AppData\Local\Temp\ccBV9hGa.s:15791  .text.BKP_GetFlagStatus:00000000 BKP_GetFlagStatus
C:\Users\mm\AppData\Local\Temp\ccBV9hGa.s:15806  .text.BKP_GetFlagStatus:00000008 $d
C:\Users\mm\AppData\Local\Temp\ccBV9hGa.s:15810  .text.BKP_ClearFlag:00000000 $t
C:\Users\mm\AppData\Local\Temp\ccBV9hGa.s:15815  .text.BKP_ClearFlag:00000000 BKP_ClearFlag
C:\Users\mm\AppData\Local\Temp\ccBV9hGa.s:15832  .text.BKP_ClearFlag:00000010 $d
C:\Users\mm\AppData\Local\Temp\ccBV9hGa.s:15836  .text.BKP_GetITStatus:00000000 $t
C:\Users\mm\AppData\Local\Temp\ccBV9hGa.s:15841  .text.BKP_GetITStatus:00000000 BKP_GetITStatus
C:\Users\mm\AppData\Local\Temp\ccBV9hGa.s:15856  .text.BKP_GetITStatus:00000008 $d
C:\Users\mm\AppData\Local\Temp\ccBV9hGa.s:15860  .text.BKP_ClearITPendingBit:00000000 $t
C:\Users\mm\AppData\Local\Temp\ccBV9hGa.s:15865  .text.BKP_ClearITPendingBit:00000000 BKP_ClearITPendingBit
C:\Users\mm\AppData\Local\Temp\ccBV9hGa.s:15882  .text.BKP_ClearITPendingBit:00000010 $d
C:\Users\mm\AppData\Local\Temp\ccBV9hGa.s:15898  .debug_frame:00000010 $d

UNDEFINED SYMBOLS
RCC_BackupResetCmd

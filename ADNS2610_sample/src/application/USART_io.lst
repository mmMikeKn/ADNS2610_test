   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 18, 4
  12              		.thumb
  13              		.file	"USART_io.c"
  23              	.Ltext0:
  24              		.file 1 "USART_io.c"
 19320              		.align	1
 19321              		.thumb
 19322              		.thumb_func
 19324              	USART_DBG_itoa.clone.0:
 19325              	.LFB36:
   0:USART_io.c    **** #include <string.h>
   1:USART_io.c    **** #include <stdarg.h>
   2:USART_io.c    **** 
   3:USART_io.c    **** #include "stm32f10x.h"
   4:USART_io.c    **** #include "stm32f10x_conf.h"
   5:USART_io.c    **** #include <core_cm3.h>
   6:USART_io.c    **** #include <stm32f10x_usart.h>
   7:USART_io.c    **** #include <stm32f10x_rtc.h>
   8:USART_io.c    **** #include "USART_io.h"
   9:USART_io.c    **** #include "global.h"
  10:USART_io.c    **** 
  11:USART_io.c    **** #ifdef USART2_ENABLE
  12:USART_io.c    **** //=========================================================================================
  13:USART_io.c    **** // USART2 Command Interface (CI)
  14:USART_io.c    **** static volatile uint8_t USART2_TxBuffer[256+4];
  15:USART_io.c    **** static volatile uint32_t USART2_TxBufferSz = 0, USART2_TxBufferPtr = 0;
  16:USART_io.c    **** static volatile uint8_t USART2_isTrnsmitEnd = TRUE;
  17:USART_io.c    **** static volatile uint8_t USART2_RxBuffer[512];
  18:USART_io.c    **** static volatile uint32_t USART2_RxBufferPtr = 0;
  19:USART_io.c    **** static volatile short recvCmdCode = CMD_ST_NO_CMD;
  20:USART_io.c    **** 
  21:USART_io.c    **** void USART2_IT_TxReady_exec() {
  22:USART_io.c    **** 	USART_SendData(USART2, (uint16_t)USART2_TxBuffer[USART2_TxBufferPtr++]);
  23:USART_io.c    **** 	if(USART2_TxBufferPtr >= USART2_TxBufferSz) {
  24:USART_io.c    **** 		USART_ITConfig(USART2, USART_IT_TXE, DISABLE);
  25:USART_io.c    **** 		USART2_isTrnsmitEnd = TRUE;
  26:USART_io.c    **** 	}
  27:USART_io.c    **** }
  28:USART_io.c    **** 
  29:USART_io.c    **** #define STX 0x02
  30:USART_io.c    **** 
  31:USART_io.c    **** // STX[2] || code[1] || sz[1] || body[sz] || lrc
  32:USART_io.c    **** void CI_putCmd(uint8_t code, const uint8_t *data, int sz) {
  33:USART_io.c    **** 	while(!USART2_isTrnsmitEnd) {};
  34:USART_io.c    **** 	USART2_TxBuffer[0] = STX;
  35:USART_io.c    **** 	USART2_TxBuffer[1] = code;
  36:USART_io.c    **** 	USART2_TxBuffer[2] = sz;
  37:USART_io.c    **** 	if(sz != 0 && data != NULL) {
  38:USART_io.c    **** 	 memcpy((unsigned char*)USART2_TxBuffer+3, data, sz);
  39:USART_io.c    **** 	}
  40:USART_io.c    **** 	USART2_TxBuffer[3+sz] = 0;
  41:USART_io.c    **** 	for(int i = 0; i < (sz+2); i++) USART2_TxBuffer[3+sz] ^= USART2_TxBuffer[1+i];
  42:USART_io.c    **** 	USART2_TxBufferSz = sz+4; USART2_TxBufferPtr = 0; USART2_isTrnsmitEnd = FALSE;
  43:USART_io.c    **** 	USART_DBG_hexDump((uint8_t*)USART2_TxBuffer, USART2_TxBufferSz); USART_DBG_puts(" snd\n");
  44:USART_io.c    **** 	USART_ITConfig(USART2, USART_IT_TXE, ENABLE);
  45:USART_io.c    **** 	while(!USART2_isTrnsmitEnd) {}
  46:USART_io.c    **** }
  47:USART_io.c    **** 
  48:USART_io.c    **** // STX || code[1] || sz[1] || body[sz] || lrc
  49:USART_io.c    **** void USART2_IT_RxReady_exec(uint8_t c) {
  50:USART_io.c    **** 	if(USART2_RxBufferPtr == 0 && c != STX) return;
  51:USART_io.c    **** 	USART2_RxBuffer[USART2_RxBufferPtr++] = c;
  52:USART_io.c    **** 
  53:USART_io.c    **** 	if(USART2_RxBufferPtr > 3) {
  54:USART_io.c    **** 		uint32_t crcOfs = USART2_RxBuffer[2] + 3;
  55:USART_io.c    **** 		if(USART2_RxBufferPtr > crcOfs) {
  56:USART_io.c    **** 			USART_DBG_hexDump((uint8_t*)USART2_RxBuffer, USART2_RxBufferPtr); USART_DBG_puts(" rcv\n");
  57:USART_io.c    **** 			for(uint32_t i = 1; i < crcOfs; i++) USART2_RxBuffer[crcOfs] ^= USART2_RxBuffer[i];
  58:USART_io.c    **** 			if(USART2_RxBuffer[crcOfs] != 0) {
  59:USART_io.c    **** 				recvCmdCode = CMD_ST_WRONG_DATA;
  60:USART_io.c    **** 			} else {
  61:USART_io.c    **** 				recvCmdCode = USART2_RxBuffer[1];
  62:USART_io.c    **** 				USART_ITConfig(USART1, USART_IT_RXNE, DISABLE);
  63:USART_io.c    **** 			}
  64:USART_io.c    **** 			USART2_RxBufferPtr = 0;
  65:USART_io.c    **** 		}
  66:USART_io.c    **** 	}
  67:USART_io.c    **** }
  68:USART_io.c    **** 
  69:USART_io.c    **** short CI_getLastCmdCode(void) {
  70:USART_io.c    **** 	if(recvCmdCode == CMD_ST_NO_CMD) return CMD_ST_NO_CMD;
  71:USART_io.c    **** 	if(recvCmdCode < 0) {
  72:USART_io.c    **** 		short st = recvCmdCode;
  73:USART_io.c    **** 		recvCmdCode = CMD_ST_NO_CMD;
  74:USART_io.c    **** 		return st;
  75:USART_io.c    **** 	}
  76:USART_io.c    **** 	return recvCmdCode;
  77:USART_io.c    **** }
  78:USART_io.c    **** 
  79:USART_io.c    **** uint8_t CI_getCmdBody(uint8_t *data, int maxSz) {
  80:USART_io.c    **** 	uint8_t sz = USART2_RxBuffer[3];
  81:USART_io.c    **** 	if(data != NULL) {
  82:USART_io.c    **** 		memcpy(data, (uint8_t*)USART2_RxBuffer+3, maxSz < sz? maxSz:sz);
  83:USART_io.c    **** 	}
  84:USART_io.c    **** 	recvCmdCode = CMD_ST_NO_CMD;
  85:USART_io.c    **** 	USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);
  86:USART_io.c    **** 	return sz;
  87:USART_io.c    **** }
  88:USART_io.c    **** #endif
  89:USART_io.c    **** //=========================================================================================
  90:USART_io.c    **** static volatile unsigned char USART1_TX_ring_buffer[USART_DBG_TX_BUFFER_SZ];
  91:USART_io.c    **** static volatile uint16_t USART_DBG_buffer_ptr_get = 0;
  92:USART_io.c    **** static volatile uint16_t USART_DBG_buffer_ptr_put = 0;
  93:USART_io.c    **** static volatile uint16_t USART_DBG_buffer_data_size = 0;
  94:USART_io.c    **** 
  95:USART_io.c    **** void USART1_IT_RxReady_exec(uint8_t c) {
  96:USART_io.c    **** 	USART_DBG_putc(c); // echo
  97:USART_io.c    **** }
  98:USART_io.c    **** 
  99:USART_io.c    **** void USART1_IT_TxReady_exec() {
 100:USART_io.c    **** 	if(USART_DBG_buffer_data_size > 0) {
 101:USART_io.c    **** 		USART_SendData(USART1, (uint16_t)USART1_TX_ring_buffer[USART_DBG_buffer_ptr_get]);
 102:USART_io.c    **** 		USART_DBG_buffer_ptr_get++; USART_DBG_buffer_data_size--;
 103:USART_io.c    **** 		if(USART_DBG_buffer_ptr_get >= sizeof(USART1_TX_ring_buffer)) {
 104:USART_io.c    **** 			USART_DBG_buffer_ptr_get = 0;
 105:USART_io.c    **** 		}
 106:USART_io.c    **** 	} else {
 107:USART_io.c    **** 		USART_ITConfig(USART1, USART_IT_TXE, DISABLE);
 108:USART_io.c    **** 	}
 109:USART_io.c    **** }
 110:USART_io.c    **** 
 111:USART_io.c    **** void USART_DBG_putc(char c) {
 112:USART_io.c    **** 	USART_ITConfig(USART1, USART_IT_TXE, DISABLE);
 113:USART_io.c    ****  	USART1_TX_ring_buffer[USART_DBG_buffer_ptr_put] = c;
 114:USART_io.c    ****  	USART_DBG_buffer_ptr_put++;
 115:USART_io.c    ****  	USART_DBG_buffer_data_size++;
 116:USART_io.c    ****  	if(USART_DBG_buffer_ptr_put >= sizeof(USART1_TX_ring_buffer)) {
 117:USART_io.c    ****  		USART_DBG_buffer_ptr_put = 0;
 118:USART_io.c    ****  	}
 119:USART_io.c    ****  	USART_ITConfig(USART1, USART_IT_TXE, ENABLE);
 120:USART_io.c    **** }
 121:USART_io.c    **** 
 122:USART_io.c    **** 
 123:USART_io.c    **** void USART_DBG_puts(char *str) {
 124:USART_io.c    ****  for(int i = 0; str[i] != 0; i++) USART_DBG_putc(str[i]);
 125:USART_io.c    **** }
 126:USART_io.c    **** 
 127:USART_io.c    **** static unsigned char USART_DBG_itoa(long val, int radix, int len, char *sout, unsigned char ptr) {
 19326              		.loc 1 128 0
 19327              		@ args = 0, pretend = 0, frame = 32
 19328              		@ frame_needed = 0, uses_anonymous_args = 0
 19329              	.LVL0:
 19330 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 19331              	.LCFI0:
 19332              	.LVL1:
 128:USART_io.c    **** 	unsigned char c, r, sgn = 0, pad = ' ';
 129:USART_io.c    **** 	unsigned char s[20], i = 0;
 130:USART_io.c    **** 	unsigned long v;
 131:USART_io.c    **** 
 132:USART_io.c    **** 	if (radix < 0) {
 19333              		.loc 1 133 0
 19334 0002 0029     		cmp	r1, #0
 128:USART_io.c    **** 	unsigned char c, r, sgn = 0, pad = ' ';
 19335              		.loc 1 128 0
 19336 0004 89B0     		sub	sp, sp, #36
 19337              	.LCFI1:
 19338              		.loc 1 133 0
 19339 0006 05DA     		bge	.L13
 19340              	.LVL2:
 133:USART_io.c    **** 		radix = -radix;
 19341              		.loc 1 134 0
 19342 0008 4942     		negs	r1, r1
 19343              	.LVL3:
 134:USART_io.c    **** 		if (val < 0) {		val = -val;	sgn = '-';	}
 19344              		.loc 1 135 0
 19345 000a 0028     		cmp	r0, #0
 19346 000c 02DA     		bge	.L13
 19347              	.LVL4:
 19348 000e 4042     		negs	r0, r0
 19349              	.LVL5:
 19350 0010 2D25     		movs	r5, #45
 19351 0012 00E0     		b	.L2
 19352              	.LVL6:
 19353              	.L13:
 129:USART_io.c    **** 	unsigned char c, r, sgn = 0, pad = ' ';
 19354              		.loc 1 129 0
 19355 0014 0025     		movs	r5, #0
 19356              	.LVL7:
 19357              	.L2:
 135:USART_io.c    **** 	}
 136:USART_io.c    **** 	v = val;
 137:USART_io.c    **** 	r = radix;
 138:USART_io.c    **** 	if (len < 0) {	len = -len;	pad = '0'; }
 19358              		.loc 1 139 0
 19359 0016 002A     		cmp	r2, #0
 138:USART_io.c    **** 	if (len < 0) {	len = -len;	pad = '0'; }
 19360              		.loc 1 138 0
 19361 0018 C9B2     		uxtb	r1, r1
 19362              	.LVL8:
 19363              		.loc 1 139 0
 19364 001a 02DA     		bge	.L14
 19365              	.LVL9:
 19366 001c 5242     		negs	r2, r2
 19367              	.LVL10:
 19368 001e 3026     		movs	r6, #48
 19369 0020 00E0     		b	.L3
 19370              	.LVL11:
 19371              	.L14:
 129:USART_io.c    **** 	unsigned char c, r, sgn = 0, pad = ' ';
 19372              		.loc 1 129 0
 19373 0022 2026     		movs	r6, #32
 19374              	.LVL12:
 19375              	.L3:
 139:USART_io.c    **** 	if (len > 20) return ptr;
 19376              		.loc 1 140 0
 19377 0024 142A     		cmp	r2, #20
 19378 0026 3FDC     		bgt	.L4
 19379              	.LVL13:
 137:USART_io.c    **** 	v = val;
 19380              		.loc 1 137 0
 19381 0028 0446     		mov	r4, r0
 19382 002a 4FF0000C 		mov	ip, #0
 19383              	.LVL14:
 19384              	.L6:
 140:USART_io.c    **** 	do {
 141:USART_io.c    **** 		c = (unsigned char)(v % r);
 19385              		.loc 1 142 0
 19386 002e B4FBF1F7 		udiv	r7, r4, r1
 19387 0032 01FB1740 		mls	r0, r1, r7, r4
 19388 0036 C0B2     		uxtb	r0, r0
 19389              	.LVL15:
 142:USART_io.c    **** 		if (c >= 10) c += 7;
 19390              		.loc 1 143 0
 19391 0038 0928     		cmp	r0, #9
 19392 003a 01D9     		bls	.L5
 19393              	.LVL16:
 19394 003c 0730     		adds	r0, r0, #7
 19395              	.LVL17:
 19396 003e C0B2     		uxtb	r0, r0
 19397              	.LVL18:
 19398              	.L5:
 143:USART_io.c    **** 		c += '0';
 144:USART_io.c    **** 		s[i++] = c;
 19399              		.loc 1 145 0
 19400 0040 08AF     		add	r7, sp, #32
 19401              	.LVL19:
 19402 0042 6744     		add	r7, r7, ip
 19403 0044 3030     		adds	r0, r0, #48
 19404 0046 0CF1010C 		add	ip, ip, #1
 19405              	.LVL20:
 145:USART_io.c    **** 		v /= r;
 19406              		.loc 1 146 0
 19407 004a B4FBF1F4 		udiv	r4, r4, r1
 19408              	.LVL21:
 145:USART_io.c    **** 		v /= r;
 19409              		.loc 1 145 0
 19410 004e 07F8140C 		strb	r0, [r7, #-20]
 19411 0052 5FFA8CFC 		uxtb	ip, ip
 19412              	.LVL22:
 146:USART_io.c    **** 	} while (v);
 19413              		.loc 1 147 0
 19414 0056 002C     		cmp	r4, #0
 19415 0058 E9D1     		bne	.L6
 147:USART_io.c    **** 	if (sgn) s[i++] = sgn;
 19416              		.loc 1 148 0
 19417 005a 3DB1     		cbz	r5, .L16
 19418 005c 08A9     		add	r1, sp, #32
 19419              	.LVL23:
 19420 005e 6144     		add	r1, r1, ip
 19421 0060 01F8145C 		strb	r5, [r1, #-20]
 19422              	.LVL24:
 19423              	.L17:
 148:USART_io.c    **** 	while (i < len)	s[i++] = pad;
 19424              		.loc 1 149 0
 19425 0064 0CF10104 		add	r4, ip, #1
 19426 0068 5FFA84FC 		uxtb	ip, r4
 19427              	.LVL25:
 19428              	.L16:
 19429 006c 9445     		cmp	ip, r2
 19430 006e BEBF     		ittt	lt
 19431 0070 08AF     		addlt	r7, sp, #32
 19432 0072 07EB0C01 		addlt	r1, r7, ip
 19433 0076 01F8146C 		strblt	r6, [r1, #-20]
 19434 007a F3DB     		blt	.L17
 19435              	.LVL26:
 128:USART_io.c    **** static unsigned char USART_DBG_itoa(long val, int radix, int len, char *sout, unsigned char ptr) {
 19436              		.loc 1 128 0
 19437 007c 0CF1FF32 		add	r2, ip, #-1
 19438              	.LVL27:
 19439 0080 D0B2     		uxtb	r0, r2
 149:USART_io.c    **** 	do	sout[ptr++] = (s[--i]);
 19440              		.loc 1 150 0
 19441 0082 0B4C     		ldr	r4, .L19
 128:USART_io.c    **** static unsigned char USART_DBG_itoa(long val, int radix, int len, char *sout, unsigned char ptr) {
 19442              		.loc 1 128 0
 19443 0084 0146     		mov	r1, r0
 19444 0086 0022     		movs	r2, #0
 19445              	.LVL28:
 19446              	.L11:
 19447              		.loc 1 150 0
 19448 0088 08AF     		add	r7, sp, #32
 19449 008a 7E18     		adds	r6, r7, r1
 19450              	.LVL29:
 19451 008c D518     		adds	r5, r2, r3
 19452 008e 16F8146C 		ldrb	r6, [r6, #-20]	@ zero_extendqisi2
 19453 0092 0139     		subs	r1, r1, #1
 19454 0094 EDB2     		uxtb	r5, r5
 150:USART_io.c    **** 	while (i);
 19455              		.loc 1 151 0
 19456 0096 8242     		cmp	r2, r0
 150:USART_io.c    **** 	while (i);
 19457              		.loc 1 150 0
 19458 0098 6655     		strb	r6, [r4, r5]
 19459 009a C9B2     		uxtb	r1, r1
 19460              		.loc 1 151 0
 19461 009c 02D2     		bcs	.L10
 19462 009e 571C     		adds	r7, r2, #1
 19463 00a0 FAB2     		uxtb	r2, r7
 19464 00a2 F1E7     		b	.L11
 19465              	.L10:
 19466 00a4 6344     		add	r3, ip, r3
 19467 00a6 DBB2     		uxtb	r3, r3
 19468              	.LVL30:
 19469              	.L4:
 151:USART_io.c    **** 	return ptr;
 152:USART_io.c    **** }
 19470              		.loc 1 153 0
 19471 00a8 1846     		mov	r0, r3
 19472 00aa 09B0     		add	sp, sp, #36
 19473 00ac F0BD     		pop	{r4, r5, r6, r7, pc}
 19474              	.L20:
 19475 00ae 00BF     		.align	2
 19476              	.L19:
 19477 00b0 00000000 		.word	.LANCHOR0
 19478              	.LFE36:
 19480              		.section	.text.USART1_IT_TxReady_exec,"ax",%progbits
 19481              		.align	1
 19482              		.global	USART1_IT_TxReady_exec
 19483              		.thumb
 19484              		.thumb_func
 19486              	USART1_IT_TxReady_exec:
 19487              	.LFB28:
 100:USART_io.c    **** void USART1_IT_TxReady_exec() {
 19488              		.loc 1 100 0
 19489              		@ args = 0, pretend = 0, frame = 0
 19490              		@ frame_needed = 0, uses_anonymous_args = 0
 19491 0000 38B5     		push	{r3, r4, r5, lr}
 19492              	.LCFI2:
 101:USART_io.c    **** 	if(USART_DBG_buffer_data_size > 0) {
 19493              		.loc 1 101 0
 19494 0002 134D     		ldr	r5, .L24
 19495 0004 2A88     		ldrh	r2, [r5, #0]
 19496 0006 92B2     		uxth	r2, r2
 19497 0008 DAB1     		cbz	r2, .L22
 102:USART_io.c    **** 		USART_SendData(USART1, (uint16_t)USART1_TX_ring_buffer[USART_DBG_buffer_ptr_get]);
 19498              		.loc 1 102 0
 19499 000a 124C     		ldr	r4, .L24+4
 19500 000c DFF848E0 		ldr	lr, .L24+8
 19501 0010 2388     		ldrh	r3, [r4, #0]
 19502 0012 1248     		ldr	r0, .L24+12
 19503 0014 9AB2     		uxth	r2, r3
 19504 0016 1EF80210 		ldrb	r1, [lr, r2]	@ zero_extendqisi2
 19505 001a FFF7FEFF 		bl	USART_SendData
 103:USART_io.c    **** 		USART_DBG_buffer_ptr_get++; USART_DBG_buffer_data_size--;
 19506              		.loc 1 103 0
 19507 001e 2188     		ldrh	r1, [r4, #0]
 19508 0020 481C     		adds	r0, r1, #1
 19509 0022 1FFA80FC 		uxth	ip, r0
 19510 0026 A4F800C0 		strh	ip, [r4, #0]	@ movhi
 19511 002a 2B88     		ldrh	r3, [r5, #0]
 19512 002c 5A1E     		subs	r2, r3, #1
 19513 002e 91B2     		uxth	r1, r2
 19514 0030 2980     		strh	r1, [r5, #0]	@ movhi
 104:USART_io.c    **** 		if(USART_DBG_buffer_ptr_get >= sizeof(USART1_TX_ring_buffer)) {
 19515              		.loc 1 104 0
 19516 0032 2088     		ldrh	r0, [r4, #0]
 19517 0034 83B2     		uxth	r3, r0
 19518 0036 B3F5806F 		cmp	r3, #1024
 19519 003a 07D3     		bcc	.L21
 105:USART_io.c    **** 			USART_DBG_buffer_ptr_get = 0;
 19520              		.loc 1 105 0
 19521 003c 0020     		movs	r0, #0
 19522 003e 2080     		strh	r0, [r4, #0]	@ movhi
 19523 0040 04E0     		b	.L21
 19524              	.L22:
 108:USART_io.c    **** 		USART_ITConfig(USART1, USART_IT_TXE, DISABLE);
 19525              		.loc 1 108 0
 19526 0042 0648     		ldr	r0, .L24+12
 19527 0044 40F22771 		movw	r1, #1831
 19528 0048 FFF7FEFF 		bl	USART_ITConfig
 19529              	.L21:
 110:USART_io.c    **** }
 19530              		.loc 1 110 0
 19531 004c 38BD     		pop	{r3, r4, r5, pc}
 19532              	.L25:
 19533 004e 00BF     		.align	2
 19534              	.L24:
 19535 0050 00000000 		.word	.LANCHOR1
 19536 0054 00000000 		.word	.LANCHOR2
 19537 0058 00000000 		.word	.LANCHOR3
 19538 005c 00380140 		.word	1073821696
 19539              	.LFE28:
 19541              		.section	.text.USART_DBG_putc,"ax",%progbits
 19542              		.align	1
 19543              		.global	USART_DBG_putc
 19544              		.thumb
 19545              		.thumb_func
 19547              	USART_DBG_putc:
 19548              	.LFB29:
 112:USART_io.c    **** void USART_DBG_putc(char c) {
 19549              		.loc 1 112 0
 19550              		@ args = 0, pretend = 0, frame = 0
 19551              		@ frame_needed = 0, uses_anonymous_args = 0
 19552              	.LVL31:
 113:USART_io.c    **** 	USART_ITConfig(USART1, USART_IT_TXE, DISABLE);
 19553              		.loc 1 113 0
 19554 0000 0022     		movs	r2, #0
 112:USART_io.c    **** void USART_DBG_putc(char c) {
 19555              		.loc 1 112 0
 19556 0002 10B5     		push	{r4, lr}
 19557              	.LCFI3:
 113:USART_io.c    **** 	USART_ITConfig(USART1, USART_IT_TXE, DISABLE);
 19558              		.loc 1 113 0
 19559 0004 40F22771 		movw	r1, #1831
 112:USART_io.c    **** void USART_DBG_putc(char c) {
 19560              		.loc 1 112 0
 19561 0008 0446     		mov	r4, r0
 113:USART_io.c    **** 	USART_ITConfig(USART1, USART_IT_TXE, DISABLE);
 19562              		.loc 1 113 0
 19563 000a 1248     		ldr	r0, .L28
 19564              	.LVL32:
 19565 000c FFF7FEFF 		bl	USART_ITConfig
 114:USART_io.c    ****  	USART1_TX_ring_buffer[USART_DBG_buffer_ptr_put] = c;
 19566              		.loc 1 114 0
 19567 0010 114B     		ldr	r3, .L28+4
 19568 0012 DFF848C0 		ldr	ip, .L28+8
 19569 0016 1A88     		ldrh	r2, [r3, #0]
 19570 0018 91B2     		uxth	r1, r2
 19571 001a 0CF80140 		strb	r4, [ip, r1]
 115:USART_io.c    ****  	USART_DBG_buffer_ptr_put++;
 19572              		.loc 1 115 0
 19573 001e 1888     		ldrh	r0, [r3, #0]
 116:USART_io.c    ****  	USART_DBG_buffer_data_size++;
 19574              		.loc 1 116 0
 19575 0020 DFF83CC0 		ldr	ip, .L28+12
 115:USART_io.c    ****  	USART_DBG_buffer_ptr_put++;
 19576              		.loc 1 115 0
 19577 0024 421C     		adds	r2, r0, #1
 19578 0026 91B2     		uxth	r1, r2
 19579 0028 1980     		strh	r1, [r3, #0]	@ movhi
 116:USART_io.c    ****  	USART_DBG_buffer_data_size++;
 19580              		.loc 1 116 0
 19581 002a BCF80000 		ldrh	r0, [ip, #0]
 19582 002e 421C     		adds	r2, r0, #1
 19583 0030 91B2     		uxth	r1, r2
 19584 0032 ACF80010 		strh	r1, [ip, #0]	@ movhi
 117:USART_io.c    ****  	if(USART_DBG_buffer_ptr_put >= sizeof(USART1_TX_ring_buffer)) {
 19585              		.loc 1 117 0
 19586 0036 1888     		ldrh	r0, [r3, #0]
 19587 0038 82B2     		uxth	r2, r0
 19588 003a B2F5806F 		cmp	r2, #1024
 19589 003e 01D3     		bcc	.L27
 118:USART_io.c    ****  		USART_DBG_buffer_ptr_put = 0;
 19590              		.loc 1 118 0
 19591 0040 0020     		movs	r0, #0
 19592 0042 1880     		strh	r0, [r3, #0]	@ movhi
 19593              	.L27:
 120:USART_io.c    ****  	USART_ITConfig(USART1, USART_IT_TXE, ENABLE);
 19594              		.loc 1 120 0
 19595 0044 0348     		ldr	r0, .L28
 19596 0046 40F22771 		movw	r1, #1831
 19597 004a 0122     		movs	r2, #1
 19598 004c FFF7FEFF 		bl	USART_ITConfig
 121:USART_io.c    **** }
 19599              		.loc 1 121 0
 19600 0050 10BD     		pop	{r4, pc}
 19601              	.L29:
 19602 0052 00BF     		.align	2
 19603              	.L28:
 19604 0054 00380140 		.word	1073821696
 19605 0058 00000000 		.word	.LANCHOR4
 19606 005c 00000000 		.word	.LANCHOR3
 19607 0060 00000000 		.word	.LANCHOR1
 19608              	.LFE29:
 19610              		.section	.text.USART1_IT_RxReady_exec,"ax",%progbits
 19611              		.align	1
 19612              		.global	USART1_IT_RxReady_exec
 19613              		.thumb
 19614              		.thumb_func
 19616              	USART1_IT_RxReady_exec:
 19617              	.LFB27:
  96:USART_io.c    **** void USART1_IT_RxReady_exec(uint8_t c) {
 19618              		.loc 1 96 0
 19619              		@ args = 0, pretend = 0, frame = 0
 19620              		@ frame_needed = 0, uses_anonymous_args = 0
 19621              	.LVL33:
 19622 0000 08B5     		push	{r3, lr}
 19623              	.LCFI4:
  97:USART_io.c    **** 	USART_DBG_putc(c); // echo
 19624              		.loc 1 97 0
 19625 0002 FFF7FEFF 		bl	USART_DBG_putc
 19626              	.LVL34:
  98:USART_io.c    **** }
 19627              		.loc 1 98 0
 19628 0006 08BD     		pop	{r3, pc}
 19629              	.LFE27:
 19631              		.section	.text.USART_DBG_puts,"ax",%progbits
 19632              		.align	1
 19633              		.global	USART_DBG_puts
 19634              		.thumb
 19635              		.thumb_func
 19637              	USART_DBG_puts:
 19638              	.LFB30:
 124:USART_io.c    **** void USART_DBG_puts(char *str) {
 19639              		.loc 1 124 0
 19640              		@ args = 0, pretend = 0, frame = 0
 19641              		@ frame_needed = 0, uses_anonymous_args = 0
 19642              	.LVL35:
 19643 0000 10B5     		push	{r4, lr}
 19644              	.LCFI5:
 19645              	.LVL36:
 124:USART_io.c    **** void USART_DBG_puts(char *str) {
 19646              		.loc 1 124 0
 19647 0002 0446     		mov	r4, r0
 19648              	.LBB2:
 125:USART_io.c    ****  for(int i = 0; str[i] != 0; i++) USART_DBG_putc(str[i]);
 19649              		.loc 1 125 0
 19650 0004 01E0     		b	.L32
 19651              	.LVL37:
 19652              	.L33:
 125:USART_io.c    ****  for(int i = 0; str[i] != 0; i++) USART_DBG_putc(str[i]);
 19653              		.loc 1 125 0 is_stmt 0 discriminator 2
 19654 0006 FFF7FEFF 		bl	USART_DBG_putc
 19655              	.L32:
 125:USART_io.c    ****  for(int i = 0; str[i] != 0; i++) USART_DBG_putc(str[i]);
 19656              		.loc 1 125 0 discriminator 1
 19657 000a 14F8010B 		ldrb	r0, [r4], #1	@ zero_extendqisi2
 19658 000e 0028     		cmp	r0, #0
 19659 0010 F9D1     		bne	.L33
 19660              	.LBE2:
 126:USART_io.c    **** }
 19661              		.loc 1 126 0 is_stmt 1
 19662 0012 10BD     		pop	{r4, pc}
 19663              	.LFE30:
 19665              		.section	.text.USART_DBG_bin,"ax",%progbits
 19666              		.align	1
 19667              		.global	USART_DBG_bin
 19668              		.thumb
 19669              		.thumb_func
 19671              	USART_DBG_bin:
 19672              	.LFB32:
 153:USART_io.c    **** 
 154:USART_io.c    **** void USART_DBG_bin(uint8_t *bin, uint16_t len) {
 19673              		.loc 1 155 0
 19674              		@ args = 0, pretend = 0, frame = 0
 19675              		@ frame_needed = 0, uses_anonymous_args = 0
 19676              	.LVL38:
 19677 0000 70B5     		push	{r4, r5, r6, lr}
 19678              	.LCFI6:
 19679              		.loc 1 155 0
 19680 0002 0E46     		mov	r6, r1
 19681              	.LVL39:
 19682 0004 0446     		mov	r4, r0
 155:USART_io.c    **** 	USART_DBG_putc(0x1B);
 19683              		.loc 1 156 0
 19684 0006 1B20     		movs	r0, #27
 19685              	.LVL40:
 19686 0008 FFF7FEFF 		bl	USART_DBG_putc
 19687              	.LVL41:
 156:USART_io.c    **** 	USART_DBG_putc((uint8_t)(len >> 8));
 19688              		.loc 1 157 0
 19689 000c 300A     		lsrs	r0, r6, #8
 19690 000e FFF7FEFF 		bl	USART_DBG_putc
 157:USART_io.c    **** 	USART_DBG_putc((uint8_t)len);
 19691              		.loc 1 158 0
 19692 0012 F0B2     		uxtb	r0, r6
 19693 0014 FFF7FEFF 		bl	USART_DBG_putc
 19694              	.LVL42:
 19695              	.LBB3:
 158:USART_io.c    **** 	for(int i = 0; i < len; i++) USART_DBG_putc(bin[i]);
 19696              		.loc 1 159 0
 19697 0018 0025     		movs	r5, #0
 19698 001a 03E0     		b	.L35
 19699              	.LVL43:
 19700              	.L36:
 19701              		.loc 1 159 0 is_stmt 0 discriminator 2
 19702 001c 605D     		ldrb	r0, [r4, r5]	@ zero_extendqisi2
 19703 001e FFF7FEFF 		bl	USART_DBG_putc
 19704 0022 0135     		adds	r5, r5, #1
 19705              	.LVL44:
 19706              	.L35:
 19707              		.loc 1 159 0 discriminator 1
 19708 0024 B542     		cmp	r5, r6
 19709 0026 F9DB     		blt	.L36
 19710              	.LVL45:
 19711              	.LBE3:
 159:USART_io.c    **** }
 19712              		.loc 1 160 0 is_stmt 1
 19713 0028 70BD     		pop	{r4, r5, r6, pc}
 19714              	.LFE32:
 19716              		.section	.text.USART_DBG_hexDump,"ax",%progbits
 19717              		.align	1
 19718              		.global	USART_DBG_hexDump
 19719              		.thumb
 19720              		.thumb_func
 19722              	USART_DBG_hexDump:
 19723              	.LFB33:
 160:USART_io.c    **** 
 161:USART_io.c    **** 
 162:USART_io.c    **** void USART_DBG_hexDump(uint8_t *bin, uint8_t len) {
 19724              		.loc 1 163 0
 19725              		@ args = 0, pretend = 0, frame = 512
 19726              		@ frame_needed = 0, uses_anonymous_args = 0
 19727              	.LVL46:
 19728 0000 10B5     		push	{r4, lr}
 19729              	.LCFI7:
 19730 0002 ADF5007D 		sub	sp, sp, #512
 19731              	.LCFI8:
 163:USART_io.c    ****  char sout[512], *xStr = sout;
 164:USART_io.c    ****  static uint8_t xlat[16] =  { '0','1','2','3','4','5','6','7', '8','9','A','B','C','D','E','F'};
 165:USART_io.c    ****  *(xStr++) = '<';
 19732              		.loc 1 166 0
 19733 0006 3C22     		movs	r2, #60
 19734 0008 6B46     		mov	r3, sp
 19735 000a 03F8012B 		strb	r2, [r3], #1
 19736              	.LVL47:
 166:USART_io.c    ****  int   i;
 167:USART_io.c    ****  for (i=0; i<len; i++) {
 168:USART_io.c    ****   *(xStr++)=xlat[(*bin)>>4];
 19737              		.loc 1 169 0
 19738 000e DFF844E0 		ldr	lr, .L40
 168:USART_io.c    ****   *(xStr++)=xlat[(*bin)>>4];
 19739              		.loc 1 168 0
 19740 0012 0022     		movs	r2, #0
 19741 0014 0EE0     		b	.L38
 19742              	.LVL48:
 19743              	.L39:
 19744              		.loc 1 169 0 discriminator 2
 19745 0016 10F802C0 		ldrb	ip, [r0, r2]	@ zero_extendqisi2
 168:USART_io.c    ****   *(xStr++)=xlat[(*bin)>>4];
 19746              		.loc 1 168 0 discriminator 2
 19747 001a 0132     		adds	r2, r2, #1
 19748              	.LVL49:
 19749              		.loc 1 169 0 discriminator 2
 19750 001c 4FEA1C14 		lsr	r4, ip, #4
 169:USART_io.c    ****   *(xStr++)=xlat[(*bin)&0x0F];
 19751              		.loc 1 170 0 discriminator 2
 19752 0020 0CF00F0C 		and	ip, ip, #15
 169:USART_io.c    ****   *(xStr++)=xlat[(*bin)&0x0F];
 19753              		.loc 1 169 0 discriminator 2
 19754 0024 1EF80440 		ldrb	r4, [lr, r4]	@ zero_extendqisi2
 19755              		.loc 1 170 0 discriminator 2
 19756 0028 1EF80CC0 		ldrb	ip, [lr, ip]	@ zero_extendqisi2
 169:USART_io.c    ****   *(xStr++)=xlat[(*bin)&0x0F];
 19757              		.loc 1 169 0 discriminator 2
 19758 002c 03F8024C 		strb	r4, [r3, #-2]
 19759              	.LVL50:
 19760              		.loc 1 170 0 discriminator 2
 19761 0030 03F801CC 		strb	ip, [r3, #-1]
 19762              	.LVL51:
 19763              	.L38:
 168:USART_io.c    ****  for (i=0; i<len; i++) {
 19764              		.loc 1 168 0 discriminator 1
 19765 0034 9C46     		mov	ip, r3
 19766              	.LVL52:
 19767 0036 0233     		adds	r3, r3, #2
 19768 0038 8A42     		cmp	r2, r1
 19769 003a ECDB     		blt	.L39
 19770              	.LVL53:
 170:USART_io.c    ****   ++bin;
 171:USART_io.c    ****  }
 172:USART_io.c    ****  *(xStr++) = '>';
 19771              		.loc 1 173 0
 19772 003c 3E20     		movs	r0, #62
 173:USART_io.c    ****  *(xStr++) = 0;
 19773              		.loc 1 174 0
 19774 003e 0023     		movs	r3, #0
 173:USART_io.c    ****  *(xStr++) = 0;
 19775              		.loc 1 173 0
 19776 0040 8CF80000 		strb	r0, [ip, #0]
 19777              		.loc 1 174 0
 19778 0044 8CF80130 		strb	r3, [ip, #1]
 174:USART_io.c    ****  USART_DBG_puts(sout);
 19779              		.loc 1 175 0
 19780 0048 6846     		mov	r0, sp
 19781 004a FFF7FEFF 		bl	USART_DBG_puts
 19782              	.LVL54:
 175:USART_io.c    **** }
 19783              		.loc 1 176 0
 19784 004e 0DF5007D 		add	sp, sp, #512
 19785 0052 10BD     		pop	{r4, pc}
 19786              	.L41:
 19787              		.align	2
 19788              	.L40:
 19789 0054 00000000 		.word	.LANCHOR5
 19790              	.LFE33:
 19792              		.section	.text.USART_DBG_printf,"ax",%progbits
 19793              		.align	1
 19794              		.global	USART_DBG_printf
 19795              		.thumb
 19796              		.thumb_func
 19798              	USART_DBG_printf:
 19799              	.LFB34:
 176:USART_io.c    **** 
 177:USART_io.c    **** 
 178:USART_io.c    **** char *USART_DBG_printf(const char* str, ...) {
 19800              		.loc 1 179 0
 19801              		@ args = 4, pretend = 16, frame = 8
 19802              		@ frame_needed = 0, uses_anonymous_args = 1
 19803              	.LVL55:
 19804 0000 0FB4     		push	{r0, r1, r2, r3}
 19805              	.LCFI9:
 19806 0002 F7B5     		push	{r0, r1, r2, r4, r5, r6, r7, lr}
 19807              	.LCFI10:
 19808              		.loc 1 179 0
 19809 0004 08AB     		add	r3, sp, #32
 19810 0006 53F8044B 		ldr	r4, [r3], #4
 179:USART_io.c    **** 	va_list arp;
 180:USART_io.c    **** 	int d, r, w, s, l;
 181:USART_io.c    **** 	va_start(arp, str);
 182:USART_io.c    **** 	static char sout[256];
 183:USART_io.c    **** 	unsigned char ptr = 0;
 184:USART_io.c    **** 
 185:USART_io.c    **** 	while ((d = *str++) != 0) {
 186:USART_io.c    **** 			if (d != '%') {	sout[ptr++]=d; continue;	}
 187:USART_io.c    **** 			d = *str++; w = r = s = l = 0;
 188:USART_io.c    **** 			if (d == '0') {
 189:USART_io.c    **** 				d = *str++; s = 1;
 190:USART_io.c    **** 			}
 191:USART_io.c    **** 			while ((d >= '0')&&(d <= '9')) {
 192:USART_io.c    **** 				w += w * 10 + (d - '0');
 19811              		.loc 1 193 0
 19812 000a 0A26     		movs	r6, #10
 182:USART_io.c    **** 	va_start(arp, str);
 19813              		.loc 1 182 0
 19814 000c 0193     		str	r3, [sp, #4]
 19815              	.LVL56:
 193:USART_io.c    **** 				d = *str++;
 194:USART_io.c    **** 			}
 195:USART_io.c    **** 			if (s) w = -w;
 196:USART_io.c    **** 			if (d == 'l') {
 197:USART_io.c    **** 				l = 1;
 198:USART_io.c    **** 				d = *str++;
 199:USART_io.c    **** 			}
 200:USART_io.c    **** 			if (!d) break;
 201:USART_io.c    **** 			if (d == 's') {
 202:USART_io.c    **** 				char *s = va_arg(arp, char*);
 203:USART_io.c    **** 				while(*s != 0) { sout[ptr++] = *s; s++; }
 204:USART_io.c    **** 				continue;
 205:USART_io.c    **** 			}
 206:USART_io.c    **** 			if (d == 'c') {
 207:USART_io.c    **** 				sout[ptr++] = (char)va_arg(arp, int);
 19816              		.loc 1 208 0
 19817 000e 3B4D     		ldr	r5, .L72
 184:USART_io.c    **** 	unsigned char ptr = 0;
 19818              		.loc 1 184 0
 19819 0010 0023     		movs	r3, #0
 186:USART_io.c    **** 	while ((d = *str++) != 0) {
 19820              		.loc 1 186 0
 19821 0012 64E0     		b	.L69
 19822              	.LVL57:
 19823              	.L62:
 19824 0014 0134     		adds	r4, r4, #1
 19825              	.LVL58:
 187:USART_io.c    **** 			if (d != '%') {	sout[ptr++]=d; continue;	}
 19826              		.loc 1 187 0
 19827 0016 252A     		cmp	r2, #37
 19828 0018 35D1     		bne	.L70
 188:USART_io.c    **** 			d = *str++; w = r = s = l = 0;
 19829              		.loc 1 188 0
 19830 001a 14F8010B 		ldrb	r0, [r4], #1	@ zero_extendqisi2
 19831              	.LVL59:
 189:USART_io.c    **** 			if (d == '0') {
 19832              		.loc 1 189 0
 19833 001e 3028     		cmp	r0, #48
 19834 0020 03D1     		bne	.L63
 19835              	.LVL60:
 190:USART_io.c    **** 				d = *str++; s = 1;
 19836              		.loc 1 190 0
 19837 0022 14F8010B 		ldrb	r0, [r4], #1	@ zero_extendqisi2
 19838              	.LVL61:
 19839 0026 0121     		movs	r1, #1
 19840 0028 00E0     		b	.L46
 19841              	.LVL62:
 19842              	.L63:
 188:USART_io.c    **** 			d = *str++; w = r = s = l = 0;
 19843              		.loc 1 188 0
 19844 002a 0021     		movs	r1, #0
 19845              	.LVL63:
 19846              	.L46:
 188:USART_io.c    **** 			d = *str++; w = r = s = l = 0;
 19847              		.loc 1 188 0 is_stmt 0 discriminator 1
 19848 002c 0022     		movs	r2, #0
 19849 002e 05E0     		b	.L47
 19850              	.LVL64:
 19851              	.L48:
 193:USART_io.c    **** 				w += w * 10 + (d - '0');
 19852              		.loc 1 193 0 is_stmt 1
 19853 0030 8018     		adds	r0, r0, r2
 19854              	.LVL65:
 19855 0032 3038     		subs	r0, r0, #48
 19856 0034 06FB0202 		mla	r2, r6, r2, r0
 19857              	.LVL66:
 194:USART_io.c    **** 				d = *str++;
 19858              		.loc 1 194 0
 19859 0038 14F8010B 		ldrb	r0, [r4], #1	@ zero_extendqisi2
 19860              	.LVL67:
 19861              	.L47:
 192:USART_io.c    **** 			while ((d >= '0')&&(d <= '9')) {
 19862              		.loc 1 192 0 discriminator 1
 19863 003c A0F1300C 		sub	ip, r0, #48
 19864 0040 BCF1090F 		cmp	ip, #9
 19865 0044 F4D9     		bls	.L48
 19866              	.LVL68:
 196:USART_io.c    **** 			if (s) w = -w;
 19867              		.loc 1 196 0
 19868 0046 01B1     		cbz	r1, .L49
 19869              	.LVL69:
 196:USART_io.c    **** 			if (s) w = -w;
 19870              		.loc 1 196 0 is_stmt 0 discriminator 1
 19871 0048 5242     		negs	r2, r2
 19872              	.LVL70:
 19873              	.L49:
 197:USART_io.c    **** 			if (d == 'l') {
 19874              		.loc 1 197 0 is_stmt 1
 19875 004a 6C28     		cmp	r0, #108
 19876 004c 03D1     		bne	.L64
 19877              	.LVL71:
 199:USART_io.c    **** 				d = *str++;
 19878              		.loc 1 199 0
 19879 004e 14F8010B 		ldrb	r0, [r4], #1	@ zero_extendqisi2
 19880              	.LVL72:
 198:USART_io.c    **** 				l = 1;
 19881              		.loc 1 198 0
 19882 0052 0127     		movs	r7, #1
 19883 0054 00E0     		b	.L50
 19884              	.LVL73:
 19885              	.L64:
 188:USART_io.c    **** 			d = *str++; w = r = s = l = 0;
 19886              		.loc 1 188 0
 19887 0056 0027     		movs	r7, #0
 19888              	.LVL74:
 19889              	.L50:
 201:USART_io.c    **** 			if (!d) break;
 19890              		.loc 1 201 0
 19891 0058 0028     		cmp	r0, #0
 19892 005a 43D0     		beq	.L51
 19893              	.LVL75:
 202:USART_io.c    **** 			if (d == 's') {
 19894              		.loc 1 202 0
 19895 005c 7328     		cmp	r0, #115
 19896 005e 0CD1     		bne	.L52
 19897              	.LBB4:
 203:USART_io.c    **** 				char *s = va_arg(arp, char*);
 19898              		.loc 1 203 0
 19899 0060 019A     		ldr	r2, [sp, #4]
 19900              	.LVL76:
 19901 0062 111D     		adds	r1, r2, #4
 19902 0064 0191     		str	r1, [sp, #4]
 19903 0066 1268     		ldr	r2, [r2, #0]
 204:USART_io.c    **** 				while(*s != 0) { sout[ptr++] = *s; s++; }
 19904              		.loc 1 204 0
 19905 0068 02E0     		b	.L53
 19906              	.LVL77:
 19907              	.L54:
 204:USART_io.c    **** 				while(*s != 0) { sout[ptr++] = *s; s++; }
 19908              		.loc 1 204 0 is_stmt 0 discriminator 2
 19909 006a E954     		strb	r1, [r5, r3]
 19910 006c 0133     		adds	r3, r3, #1
 19911              	.LVL78:
 19912 006e DBB2     		uxtb	r3, r3
 19913              	.LVL79:
 19914              	.L53:
 204:USART_io.c    **** 				while(*s != 0) { sout[ptr++] = *s; s++; }
 19915              		.loc 1 204 0 discriminator 1
 19916 0070 12F8011B 		ldrb	r1, [r2], #1	@ zero_extendqisi2
 19917 0074 0029     		cmp	r1, #0
 19918 0076 F8D1     		bne	.L54
 19919 0078 31E0     		b	.L69
 19920              	.LVL80:
 19921              	.L52:
 19922              	.LBE4:
 207:USART_io.c    **** 			if (d == 'c') {
 19923              		.loc 1 207 0 is_stmt 1
 19924 007a 6328     		cmp	r0, #99
 19925 007c 07D1     		bne	.L55
 19926              		.loc 1 208 0
 19927 007e 0198     		ldr	r0, [sp, #4]
 19928              	.LVL81:
 19929 0080 021D     		adds	r2, r0, #4
 19930              	.LVL82:
 19931 0082 0192     		str	r2, [sp, #4]
 19932 0084 0268     		ldr	r2, [r0, #0]
 19933              	.LVL83:
 19934              	.L70:
 19935 0086 591C     		adds	r1, r3, #1
 19936 0088 EA54     		strb	r2, [r5, r3]
 19937 008a CBB2     		uxtb	r3, r1
 19938              	.LVL84:
 208:USART_io.c    **** 				continue;
 19939              		.loc 1 209 0
 19940 008c 27E0     		b	.L69
 19941              	.LVL85:
 19942              	.L55:
 209:USART_io.c    **** 			}
 210:USART_io.c    **** 			if (d == 'u') r = 10;
 19943              		.loc 1 211 0
 19944 008e 7528     		cmp	r0, #117
 19945 0090 08BF     		it	eq
 19946 0092 4FF00A0C 		moveq	ip, #10
 19947 0096 05D0     		beq	.L57
 19948              	.LVL86:
 188:USART_io.c    **** 			d = *str++; w = r = s = l = 0;
 19949              		.loc 1 188 0
 19950 0098 6428     		cmp	r0, #100
 19951 009a 0CBF     		ite	eq
 19952 009c 6FF0090C 		mvneq	ip, #9
 19953 00a0 4FF0000C 		movne	ip, #0
 19954              	.LVL87:
 19955              	.L57:
 211:USART_io.c    **** 			if (d == 'd') r = -10;
 212:USART_io.c    **** 			if (d == 'X' || d == 'x') r = 16; // 'x' added by mthomas in increase compatibility
 19956              		.loc 1 213 0
 19957 00a4 5828     		cmp	r0, #88
 19958 00a6 14BF     		ite	ne
 19959 00a8 4FF0000E 		movne	lr, #0
 19960 00ac 4FF0010E 		moveq	lr, #1
 19961 00b0 7828     		cmp	r0, #120
 19962 00b2 08BF     		it	eq
 19963 00b4 4EF0010E 		orreq	lr, lr, #1
 19964 00b8 BEF1000F 		cmp	lr, #0
 19965 00bc 0CBF     		ite	eq
 19966 00be 6146     		moveq	r1, ip
 19967 00c0 1021     		movne	r1, #16
 19968              	.LVL88:
 213:USART_io.c    **** 			if (d == 'b') r = 2;
 19969              		.loc 1 214 0
 19970 00c2 6228     		cmp	r0, #98
 19971 00c4 01D0     		beq	.L68
 19972              	.LVL89:
 214:USART_io.c    **** 			if (!r) break;
 19973              		.loc 1 215 0
 19974 00c6 09B9     		cbnz	r1, .L59
 19975              	.LVL90:
 19976 00c8 0CE0     		b	.L51
 19977              	.LVL91:
 19978              	.L68:
 214:USART_io.c    **** 			if (!r) break;
 19979              		.loc 1 214 0
 19980 00ca 0221     		movs	r1, #2
 19981              	.LVL92:
 19982              	.L59:
 19983 00cc 0198     		ldr	r0, [sp, #4]
 19984              	.LVL93:
 215:USART_io.c    **** 			if (l) {
 216:USART_io.c    **** 				ptr = USART_DBG_itoa((long)va_arg(arp, long), r, w, sout, ptr);
 217:USART_io.c    **** 			} else {
 218:USART_io.c    **** 				if (r > 0) ptr = USART_DBG_itoa((unsigned long)va_arg(arp, int), r, w, sout, ptr);
 219:USART_io.c    **** 				else	ptr = USART_DBG_itoa((long)va_arg(arp, int), r, w, sout, ptr);
 19985              		.loc 1 220 0
 19986 00ce 00F1040C 		add	ip, r0, #4
 19987 00d2 CDF804C0 		str	ip, [sp, #4]
 19988 00d6 0068     		ldr	r0, [r0, #0]
 19989 00d8 FFF7FEFF 		bl	USART_DBG_itoa.clone.0
 19990              	.LVL94:
 19991 00dc 0346     		mov	r3, r0
 19992              	.LVL95:
 19993              	.L69:
 186:USART_io.c    **** 	while ((d = *str++) != 0) {
 19994              		.loc 1 186 0 discriminator 1
 19995 00de 2278     		ldrb	r2, [r4, #0]	@ zero_extendqisi2
 19996              	.LVL96:
 19997 00e0 002A     		cmp	r2, #0
 19998 00e2 97D1     		bne	.L62
 19999              	.LVL97:
 20000              	.L51:
 220:USART_io.c    **** 			}
 221:USART_io.c    **** 	}
 222:USART_io.c    **** 	va_end(arp);
 223:USART_io.c    **** 	sout[ptr] = 0;
 20001              		.loc 1 224 0
 20002 00e4 054C     		ldr	r4, .L72
 20003 00e6 0022     		movs	r2, #0
 224:USART_io.c    **** 	USART_DBG_puts(sout);
 20004              		.loc 1 225 0
 20005 00e8 2046     		mov	r0, r4
 20006              	.LVL98:
 224:USART_io.c    **** 	USART_DBG_puts(sout);
 20007              		.loc 1 224 0
 20008 00ea E254     		strb	r2, [r4, r3]
 20009              		.loc 1 225 0
 20010 00ec FFF7FEFF 		bl	USART_DBG_puts
 20011              	.LVL99:
 225:USART_io.c    **** 	return sout;
 226:USART_io.c    **** }
 20012              		.loc 1 227 0
 20013 00f0 2046     		mov	r0, r4
 20014 00f2 BDE8FE40 		pop	{r1, r2, r3, r4, r5, r6, r7, lr}
 20015 00f6 04B0     		add	sp, sp, #16
 20016 00f8 7047     		bx	lr
 20017              	.L73:
 20018 00fa 00BF     		.align	2
 20019              	.L72:
 20020 00fc 00000000 		.word	.LANCHOR0
 20021              	.LFE34:
 20023              		.section	.text.USART_init,"ax",%progbits
 20024              		.align	1
 20025              		.global	USART_init
 20026              		.thumb
 20027              		.thumb_func
 20029              	USART_init:
 20030              	.LFB35:
 227:USART_io.c    **** 
 228:USART_io.c    **** 
 229:USART_io.c    **** 
 230:USART_io.c    **** //=========================================================================================
 231:USART_io.c    **** 
 232:USART_io.c    **** void USART_init() {
 20031              		.loc 1 233 0
 20032              		@ args = 0, pretend = 0, frame = 24
 20033              		@ frame_needed = 0, uses_anonymous_args = 0
 20034 0000 70B5     		push	{r4, r5, r6, lr}
 20035              	.LCFI11:
 233:USART_io.c    **** 	RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
 20036              		.loc 1 234 0
 20037 0002 0121     		movs	r1, #1
 233:USART_io.c    **** 	RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
 20038              		.loc 1 233 0
 20039 0004 86B0     		sub	sp, sp, #24
 20040              	.LCFI12:
 20041              		.loc 1 234 0
 20042 0006 4FF48040 		mov	r0, #16384
 20043 000a FFF7FEFF 		bl	RCC_APB2PeriphClockCmd
 234:USART_io.c    **** #ifdef USART2_ENABLE
 235:USART_io.c    **** 	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
 236:USART_io.c    **** #endif
 237:USART_io.c    **** 	GPIO_InitTypeDef GPIO_InitStructure;
 238:USART_io.c    **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 20044              		.loc 1 239 0
 20045 000e 0321     		movs	r1, #3
 239:USART_io.c    **** 
 240:USART_io.c    **** 	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_1);
 20046              		.loc 1 241 0
 20047 0010 4FF4C060 		mov	r0, #1536
 239:USART_io.c    **** 
 20048              		.loc 1 239 0
 20049 0014 8DF81610 		strb	r1, [sp, #22]
 241:USART_io.c    **** 	NVIC_InitTypeDef NVIC_InitStructure;
 242:USART_io.c    **** 	NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;
 243:USART_io.c    **** 	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 2;
 244:USART_io.c    **** 	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
 245:USART_io.c    **** 	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 246:USART_io.c    **** 	NVIC_Init(&NVIC_InitStructure);
 20050              		.loc 1 247 0
 20051 0018 04AC     		add	r4, sp, #16
 241:USART_io.c    **** 	NVIC_InitTypeDef NVIC_InitStructure;
 20052              		.loc 1 241 0
 20053 001a FFF7FEFF 		bl	NVIC_PriorityGroupConfig
 244:USART_io.c    **** 	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 2;
 20054              		.loc 1 244 0
 20055 001e 0226     		movs	r6, #2
 243:USART_io.c    **** 	NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;
 20056              		.loc 1 243 0
 20057 0020 2520     		movs	r0, #37
 20058 0022 8DF81000 		strb	r0, [sp, #16]
 244:USART_io.c    **** 	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 2;
 20059              		.loc 1 244 0
 20060 0026 8DF81160 		strb	r6, [sp, #17]
 20061              		.loc 1 247 0
 20062 002a 2046     		mov	r0, r4
 245:USART_io.c    **** 	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
 20063              		.loc 1 245 0
 20064 002c 0126     		movs	r6, #1
 247:USART_io.c    **** 	NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
 248:USART_io.c    **** 	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
 249:USART_io.c    **** 	NVIC_Init(&NVIC_InitStructure);
 250:USART_io.c    **** 
 251:USART_io.c    **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 20065              		.loc 1 252 0
 20066 002e 1825     		movs	r5, #24
 245:USART_io.c    **** 	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
 20067              		.loc 1 245 0
 20068 0030 8DF81260 		strb	r6, [sp, #18]
 246:USART_io.c    **** 	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 20069              		.loc 1 246 0
 20070 0034 8DF81360 		strb	r6, [sp, #19]
 247:USART_io.c    **** 	NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
 20071              		.loc 1 247 0
 20072 0038 FFF7FEFF 		bl	NVIC_Init
 248:USART_io.c    **** 	NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
 20073              		.loc 1 248 0
 20074 003c 2623     		movs	r3, #38
 250:USART_io.c    **** 	NVIC_Init(&NVIC_InitStructure);
 20075              		.loc 1 250 0
 20076 003e 2046     		mov	r0, r4
 248:USART_io.c    **** 	NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
 20077              		.loc 1 248 0
 20078 0040 8DF81030 		strb	r3, [sp, #16]
 252:USART_io.c    **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9; // USAR1 TX
 20079              		.loc 1 253 0
 20080 0044 0DEB0504 		add	r4, sp, r5
 249:USART_io.c    **** 	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
 20081              		.loc 1 249 0
 20082 0048 8DF81160 		strb	r6, [sp, #17]
 250:USART_io.c    **** 	NVIC_Init(&NVIC_InitStructure);
 20083              		.loc 1 250 0
 20084 004c FFF7FEFF 		bl	NVIC_Init
 20085              		.loc 1 253 0
 20086 0050 4FF4007C 		mov	ip, #512	@ movhi
 252:USART_io.c    **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9; // USAR1 TX
 20087              		.loc 1 252 0
 20088 0054 8DF81750 		strb	r5, [sp, #23]
 253:USART_io.c    **** 	GPIO_Init(GPIOA, &GPIO_InitStructure);
 20089              		.loc 1 254 0
 20090 0058 1C4D     		ldr	r5, .L75
 253:USART_io.c    **** 	GPIO_Init(GPIOA, &GPIO_InitStructure);
 20091              		.loc 1 253 0
 20092 005a 24F804CD 		strh	ip, [r4, #-4]!	@ movhi
 20093              		.loc 1 254 0
 20094 005e 2846     		mov	r0, r5
 20095 0060 2146     		mov	r1, r4
 20096 0062 FFF7FEFF 		bl	GPIO_Init
 254:USART_io.c    **** #ifdef USART2_ENABLE
 255:USART_io.c    **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2; // USAR2 TX
 256:USART_io.c    **** 	GPIO_Init(GPIOA, &GPIO_InitStructure);
 257:USART_io.c    **** #endif
 258:USART_io.c    **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 259:USART_io.c    **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10; // USAR1 RX
 20097              		.loc 1 260 0
 20098 0066 4FF48061 		mov	r1, #1024	@ movhi
 259:USART_io.c    **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10; // USAR1 RX
 20099              		.loc 1 259 0
 20100 006a 0422     		movs	r2, #4
 20101              		.loc 1 260 0
 20102 006c ADF81410 		strh	r1, [sp, #20]	@ movhi
 260:USART_io.c    **** 	GPIO_Init(GPIOA, &GPIO_InitStructure);
 20103              		.loc 1 261 0
 20104 0070 2846     		mov	r0, r5
 20105 0072 2146     		mov	r1, r4
 259:USART_io.c    **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 20106              		.loc 1 259 0
 20107 0074 8DF81720 		strb	r2, [sp, #23]
 261:USART_io.c    **** #ifdef USART2_ENABLE
 262:USART_io.c    **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;  // USAR2 RX
 263:USART_io.c    **** 	GPIO_Init(GPIOA, &GPIO_InitStructure);
 264:USART_io.c    **** #endif
 265:USART_io.c    **** 	USART_InitTypeDef USART_InitStructure;
 266:USART_io.c    **** 	USART_InitStructure.USART_BaudRate = 115200;
 267:USART_io.c    **** 	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 268:USART_io.c    **** 	USART_InitStructure.USART_StopBits = USART_StopBits_1;
 269:USART_io.c    **** 	USART_InitStructure.USART_Parity = USART_Parity_No;
 270:USART_io.c    **** 	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 271:USART_io.c    **** 	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 272:USART_io.c    **** 
 273:USART_io.c    **** 	USART_Init(USART1, &USART_InitStructure);
 20108              		.loc 1 274 0
 20109 0078 05F54055 		add	r5, r5, #12288
 261:USART_io.c    **** #ifdef USART2_ENABLE
 20110              		.loc 1 261 0
 20111 007c FFF7FEFF 		bl	GPIO_Init
 267:USART_io.c    **** 	USART_InitStructure.USART_BaudRate = 115200;
 20112              		.loc 1 267 0
 20113 0080 4FF4E130 		mov	r0, #115200
 268:USART_io.c    **** 	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 20114              		.loc 1 268 0
 20115 0084 0024     		movs	r4, #0
 272:USART_io.c    **** 	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 20116              		.loc 1 272 0
 20117 0086 0C23     		movs	r3, #12
 267:USART_io.c    **** 	USART_InitStructure.USART_BaudRate = 115200;
 20118              		.loc 1 267 0
 20119 0088 0090     		str	r0, [sp, #0]
 20120              		.loc 1 274 0
 20121 008a 6946     		mov	r1, sp
 20122 008c 2846     		mov	r0, r5
 272:USART_io.c    **** 	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 20123              		.loc 1 272 0
 20124 008e ADF80A30 		strh	r3, [sp, #10]	@ movhi
 268:USART_io.c    **** 	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 20125              		.loc 1 268 0
 20126 0092 ADF80440 		strh	r4, [sp, #4]	@ movhi
 269:USART_io.c    **** 	USART_InitStructure.USART_StopBits = USART_StopBits_1;
 20127              		.loc 1 269 0
 20128 0096 ADF80640 		strh	r4, [sp, #6]	@ movhi
 270:USART_io.c    **** 	USART_InitStructure.USART_Parity = USART_Parity_No;
 20129              		.loc 1 270 0
 20130 009a ADF80840 		strh	r4, [sp, #8]	@ movhi
 271:USART_io.c    **** 	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 20131              		.loc 1 271 0
 20132 009e ADF80C40 		strh	r4, [sp, #12]	@ movhi
 20133              		.loc 1 274 0
 20134 00a2 FFF7FEFF 		bl	USART_Init
 274:USART_io.c    **** 	USART_Cmd(USART1, ENABLE);
 20135              		.loc 1 275 0
 20136 00a6 2846     		mov	r0, r5
 20137 00a8 3146     		mov	r1, r6
 20138 00aa FFF7FEFF 		bl	USART_Cmd
 275:USART_io.c    **** 	USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);
 20139              		.loc 1 276 0
 20140 00ae 2846     		mov	r0, r5
 20141 00b0 3246     		mov	r2, r6
 20142 00b2 40F22551 		movw	r1, #1317
 20143 00b6 FFF7FEFF 		bl	USART_ITConfig
 276:USART_io.c    **** 	USART_ITConfig(USART1, USART_IT_TXE, DISABLE);
 20144              		.loc 1 277 0
 20145 00ba 2846     		mov	r0, r5
 20146 00bc 40F22771 		movw	r1, #1831
 20147 00c0 2246     		mov	r2, r4
 20148 00c2 FFF7FEFF 		bl	USART_ITConfig
 277:USART_io.c    **** 
 278:USART_io.c    **** #ifdef USART2_ENABLE
 279:USART_io.c    **** 	USART_Init(USART2, &USART_InitStructure); USART_Cmd(USART2, ENABLE);
 280:USART_io.c    **** 	USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
 281:USART_io.c    **** 	USART_ITConfig(USART2, USART_IT_TXE, DISABLE);
 282:USART_io.c    **** #endif
 283:USART_io.c    **** }
 20149              		.loc 1 284 0
 20150 00c6 06B0     		add	sp, sp, #24
 20151 00c8 70BD     		pop	{r4, r5, r6, pc}
 20152              	.L76:
 20153 00ca 00BF     		.align	2
 20154              	.L75:
 20155 00cc 00080140 		.word	1073809408
 20156              	.LFE35:
 20158              		.section	.bss.USART_DBG_buffer_ptr_put,"aw",%nobits
 20159              		.align	1
 20160              		.set	.LANCHOR4,. + 0
 20163              	USART_DBG_buffer_ptr_put:
 20164 0000 0000     		.space	2
 20165              		.section	.bss.USART_DBG_buffer_ptr_get,"aw",%nobits
 20166              		.align	1
 20167              		.set	.LANCHOR2,. + 0
 20170              	USART_DBG_buffer_ptr_get:
 20171 0000 0000     		.space	2
 20172              		.section	.rodata.xlat.3456,"a",%progbits
 20173              		.align	2
 20174              		.set	.LANCHOR5,. + 0
 20177              	xlat.3456:
 20178 0000 30       		.byte	48
 20179 0001 31       		.byte	49
 20180 0002 32       		.byte	50
 20181 0003 33       		.byte	51
 20182 0004 34       		.byte	52
 20183 0005 35       		.byte	53
 20184 0006 36       		.byte	54
 20185 0007 37       		.byte	55
 20186 0008 38       		.byte	56
 20187 0009 39       		.byte	57
 20188 000a 41       		.byte	65
 20189 000b 42       		.byte	66
 20190 000c 43       		.byte	67
 20191 000d 44       		.byte	68
 20192 000e 45       		.byte	69
 20193 000f 46       		.byte	70
 20194              		.section	.bss.USART1_TX_ring_buffer,"aw",%nobits
 20195              		.align	2
 20196              		.set	.LANCHOR3,. + 0
 20199              	USART1_TX_ring_buffer:
 20200 0000 00000000 		.space	1024
 20200      00000000 
 20200      00000000 
 20200      00000000 
 20200      00000000 
 20201              		.section	.bss.sout.3470,"aw",%nobits
 20202              		.align	2
 20203              		.set	.LANCHOR0,. + 0
 20206              	sout.3470:
 20207 0000 00000000 		.space	256
 20207      00000000 
 20207      00000000 
 20207      00000000 
 20207      00000000 
 20208              		.section	.bss.USART_DBG_buffer_data_size,"aw",%nobits
 20209              		.align	1
 20210              		.set	.LANCHOR1,. + 0
 20213              	USART_DBG_buffer_data_size:
 20214 0000 0000     		.space	2
 20423              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 USART_io.c
C:\Users\mm\AppData\Local\Temp\cca5xohk.s:19320  .text.USART_DBG_itoa.clone.0:00000000 $t
C:\Users\mm\AppData\Local\Temp\cca5xohk.s:19324  .text.USART_DBG_itoa.clone.0:00000000 USART_DBG_itoa.clone.0
C:\Users\mm\AppData\Local\Temp\cca5xohk.s:19477  .text.USART_DBG_itoa.clone.0:000000b0 $d
C:\Users\mm\AppData\Local\Temp\cca5xohk.s:19481  .text.USART1_IT_TxReady_exec:00000000 $t
C:\Users\mm\AppData\Local\Temp\cca5xohk.s:19486  .text.USART1_IT_TxReady_exec:00000000 USART1_IT_TxReady_exec
C:\Users\mm\AppData\Local\Temp\cca5xohk.s:19535  .text.USART1_IT_TxReady_exec:00000050 $d
C:\Users\mm\AppData\Local\Temp\cca5xohk.s:19542  .text.USART_DBG_putc:00000000 $t
C:\Users\mm\AppData\Local\Temp\cca5xohk.s:19547  .text.USART_DBG_putc:00000000 USART_DBG_putc
C:\Users\mm\AppData\Local\Temp\cca5xohk.s:19604  .text.USART_DBG_putc:00000054 $d
C:\Users\mm\AppData\Local\Temp\cca5xohk.s:19611  .text.USART1_IT_RxReady_exec:00000000 $t
C:\Users\mm\AppData\Local\Temp\cca5xohk.s:19616  .text.USART1_IT_RxReady_exec:00000000 USART1_IT_RxReady_exec
C:\Users\mm\AppData\Local\Temp\cca5xohk.s:19632  .text.USART_DBG_puts:00000000 $t
C:\Users\mm\AppData\Local\Temp\cca5xohk.s:19637  .text.USART_DBG_puts:00000000 USART_DBG_puts
C:\Users\mm\AppData\Local\Temp\cca5xohk.s:19666  .text.USART_DBG_bin:00000000 $t
C:\Users\mm\AppData\Local\Temp\cca5xohk.s:19671  .text.USART_DBG_bin:00000000 USART_DBG_bin
C:\Users\mm\AppData\Local\Temp\cca5xohk.s:19717  .text.USART_DBG_hexDump:00000000 $t
C:\Users\mm\AppData\Local\Temp\cca5xohk.s:19722  .text.USART_DBG_hexDump:00000000 USART_DBG_hexDump
C:\Users\mm\AppData\Local\Temp\cca5xohk.s:19789  .text.USART_DBG_hexDump:00000054 $d
C:\Users\mm\AppData\Local\Temp\cca5xohk.s:19793  .text.USART_DBG_printf:00000000 $t
C:\Users\mm\AppData\Local\Temp\cca5xohk.s:19798  .text.USART_DBG_printf:00000000 USART_DBG_printf
C:\Users\mm\AppData\Local\Temp\cca5xohk.s:20020  .text.USART_DBG_printf:000000fc $d
C:\Users\mm\AppData\Local\Temp\cca5xohk.s:20024  .text.USART_init:00000000 $t
C:\Users\mm\AppData\Local\Temp\cca5xohk.s:20029  .text.USART_init:00000000 USART_init
C:\Users\mm\AppData\Local\Temp\cca5xohk.s:20155  .text.USART_init:000000cc $d
C:\Users\mm\AppData\Local\Temp\cca5xohk.s:20159  .bss.USART_DBG_buffer_ptr_put:00000000 $d
C:\Users\mm\AppData\Local\Temp\cca5xohk.s:20163  .bss.USART_DBG_buffer_ptr_put:00000000 USART_DBG_buffer_ptr_put
C:\Users\mm\AppData\Local\Temp\cca5xohk.s:20166  .bss.USART_DBG_buffer_ptr_get:00000000 $d
C:\Users\mm\AppData\Local\Temp\cca5xohk.s:20170  .bss.USART_DBG_buffer_ptr_get:00000000 USART_DBG_buffer_ptr_get
C:\Users\mm\AppData\Local\Temp\cca5xohk.s:20173  .rodata.xlat.3456:00000000 $d
C:\Users\mm\AppData\Local\Temp\cca5xohk.s:20177  .rodata.xlat.3456:00000000 xlat.3456
C:\Users\mm\AppData\Local\Temp\cca5xohk.s:20195  .bss.USART1_TX_ring_buffer:00000000 $d
C:\Users\mm\AppData\Local\Temp\cca5xohk.s:20199  .bss.USART1_TX_ring_buffer:00000000 USART1_TX_ring_buffer
C:\Users\mm\AppData\Local\Temp\cca5xohk.s:20202  .bss.sout.3470:00000000 $d
C:\Users\mm\AppData\Local\Temp\cca5xohk.s:20206  .bss.sout.3470:00000000 sout.3470
C:\Users\mm\AppData\Local\Temp\cca5xohk.s:20209  .bss.USART_DBG_buffer_data_size:00000000 $d
C:\Users\mm\AppData\Local\Temp\cca5xohk.s:20213  .bss.USART_DBG_buffer_data_size:00000000 USART_DBG_buffer_data_size
C:\Users\mm\AppData\Local\Temp\cca5xohk.s:20228  .debug_frame:00000010 $d

UNDEFINED SYMBOLS
USART_SendData
USART_ITConfig
RCC_APB2PeriphClockCmd
NVIC_PriorityGroupConfig
NVIC_Init
GPIO_Init
USART_Init
USART_Cmd
